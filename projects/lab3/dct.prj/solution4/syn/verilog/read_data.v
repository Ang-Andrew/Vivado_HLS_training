// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        buf_0_address0,
        buf_0_ce0,
        buf_0_we0,
        buf_0_d0,
        buf_1_address0,
        buf_1_ce0,
        buf_1_we0,
        buf_1_d0,
        buf_2_address0,
        buf_2_ce0,
        buf_2_we0,
        buf_2_d0,
        buf_3_address0,
        buf_3_ce0,
        buf_3_we0,
        buf_3_d0,
        buf_4_address0,
        buf_4_ce0,
        buf_4_we0,
        buf_4_d0,
        buf_5_address0,
        buf_5_ce0,
        buf_5_we0,
        buf_5_d0,
        buf_6_address0,
        buf_6_ce0,
        buf_6_we0,
        buf_6_d0,
        buf_7_address0,
        buf_7_ce0,
        buf_7_we0,
        buf_7_d0
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state4 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [2:0] buf_0_address0;
output   buf_0_ce0;
output   buf_0_we0;
output  [15:0] buf_0_d0;
output  [2:0] buf_1_address0;
output   buf_1_ce0;
output   buf_1_we0;
output  [15:0] buf_1_d0;
output  [2:0] buf_2_address0;
output   buf_2_ce0;
output   buf_2_we0;
output  [15:0] buf_2_d0;
output  [2:0] buf_3_address0;
output   buf_3_ce0;
output   buf_3_we0;
output  [15:0] buf_3_d0;
output  [2:0] buf_4_address0;
output   buf_4_ce0;
output   buf_4_we0;
output  [15:0] buf_4_d0;
output  [2:0] buf_5_address0;
output   buf_5_ce0;
output   buf_5_we0;
output  [15:0] buf_5_d0;
output  [2:0] buf_6_address0;
output   buf_6_ce0;
output   buf_6_we0;
output  [15:0] buf_6_d0;
output  [2:0] buf_7_address0;
output   buf_7_ce0;
output   buf_7_we0;
output  [15:0] buf_7_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg buf_0_ce0;
reg buf_0_we0;
reg buf_1_ce0;
reg buf_1_we0;
reg buf_2_ce0;
reg buf_2_we0;
reg buf_3_ce0;
reg buf_3_we0;
reg buf_4_ce0;
reg buf_4_we0;
reg buf_5_ce0;
reg buf_5_we0;
reg buf_6_ce0;
reg buf_6_we0;
reg buf_7_ce0;
reg buf_7_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_186;
reg   [3:0] r_reg_197;
reg   [3:0] c_reg_208;
wire   [0:0] exitcond_flatten_fu_219_p2;
reg   [0:0] exitcond_flatten_reg_303;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [6:0] indvar_flatten_next_fu_225_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] c_mid2_fu_243_p3;
reg   [3:0] c_mid2_reg_312;
wire   [3:0] tmp_mid2_v_v_fu_251_p3;
reg   [3:0] tmp_mid2_v_v_reg_317;
wire   [2:0] tmp_fu_259_p1;
reg   [2:0] tmp_reg_322;
wire   [3:0] c_1_fu_286_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] r_phi_fu_201_p4;
wire   [31:0] sum_cast_fu_281_p1;
wire   [31:0] c_cast1_fu_292_p1;
wire   [0:0] exitcond3_fu_237_p2;
wire   [3:0] r_1_fu_231_p2;
wire   [5:0] tmp_mid2_fu_263_p3;
wire   [5:0] c_cast2_fu_271_p1;
wire   [5:0] sum_fu_275_p2;
wire   [0:0] ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_219_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_219_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_219_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_219_p2 == 1'b0))) begin
        c_reg_208 <= c_1_fu_286_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        c_reg_208 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_219_p2 == 1'b0))) begin
        indvar_flatten_reg_186 <= indvar_flatten_next_fu_225_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        indvar_flatten_reg_186 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_303 == 1'b0))) begin
        r_reg_197 <= tmp_mid2_v_v_reg_317;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        r_reg_197 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_219_p2 == 1'b0))) begin
        c_mid2_reg_312 <= c_mid2_fu_243_p3;
        tmp_reg_322 <= tmp_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        exitcond_flatten_reg_303 <= exitcond_flatten_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_219_p2 == 1'b0))) begin
        tmp_mid2_v_v_reg_317 <= tmp_mid2_v_v_fu_251_p3;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_0_ce0 = 1'b1;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_0))) begin
        buf_0_we0 = 1'b1;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_1))) begin
        buf_1_we0 = 1'b1;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_2_ce0 = 1'b1;
    end else begin
        buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_2))) begin
        buf_2_we0 = 1'b1;
    end else begin
        buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_3_ce0 = 1'b1;
    end else begin
        buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_3))) begin
        buf_3_we0 = 1'b1;
    end else begin
        buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_4_ce0 = 1'b1;
    end else begin
        buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_4))) begin
        buf_4_we0 = 1'b1;
    end else begin
        buf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_5_ce0 = 1'b1;
    end else begin
        buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_5))) begin
        buf_5_we0 = 1'b1;
    end else begin
        buf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_6_ce0 = 1'b1;
    end else begin
        buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_6))) begin
        buf_6_we0 = 1'b1;
    end else begin
        buf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_7_ce0 = 1'b1;
    end else begin
        buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_reg_322 == ap_const_lv3_7))) begin
        buf_7_we0 = 1'b1;
    end else begin
        buf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_303 == 1'b0))) begin
        r_phi_fu_201_p4 = tmp_mid2_v_v_reg_317;
    end else begin
        r_phi_fu_201_p4 = r_reg_197;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_219_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_2];

assign buf_0_address0 = c_cast1_fu_292_p1;

assign buf_0_d0 = input_r_q0;

assign buf_1_address0 = c_cast1_fu_292_p1;

assign buf_1_d0 = input_r_q0;

assign buf_2_address0 = c_cast1_fu_292_p1;

assign buf_2_d0 = input_r_q0;

assign buf_3_address0 = c_cast1_fu_292_p1;

assign buf_3_d0 = input_r_q0;

assign buf_4_address0 = c_cast1_fu_292_p1;

assign buf_4_d0 = input_r_q0;

assign buf_5_address0 = c_cast1_fu_292_p1;

assign buf_5_d0 = input_r_q0;

assign buf_6_address0 = c_cast1_fu_292_p1;

assign buf_6_d0 = input_r_q0;

assign buf_7_address0 = c_cast1_fu_292_p1;

assign buf_7_d0 = input_r_q0;

assign c_1_fu_286_p2 = (c_mid2_fu_243_p3 + ap_const_lv4_1);

assign c_cast1_fu_292_p1 = c_mid2_reg_312;

assign c_cast2_fu_271_p1 = c_mid2_fu_243_p3;

assign c_mid2_fu_243_p3 = ((exitcond3_fu_237_p2[0:0] === 1'b1) ? ap_const_lv4_0 : c_reg_208);

assign exitcond3_fu_237_p2 = ((c_reg_208 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_219_p2 = ((indvar_flatten_reg_186 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_225_p2 = (indvar_flatten_reg_186 + ap_const_lv7_1);

assign input_r_address0 = sum_cast_fu_281_p1;

assign r_1_fu_231_p2 = (ap_const_lv4_1 + r_phi_fu_201_p4);

assign sum_cast_fu_281_p1 = sum_fu_275_p2;

assign sum_fu_275_p2 = (tmp_mid2_fu_263_p3 + c_cast2_fu_271_p1);

assign tmp_fu_259_p1 = tmp_mid2_v_v_fu_251_p3[2:0];

assign tmp_mid2_fu_263_p3 = {{tmp_fu_259_p1}, {ap_const_lv3_0}};

assign tmp_mid2_v_v_fu_251_p3 = ((exitcond3_fu_237_p2[0:0] === 1'b1) ? r_1_fu_231_p2 : r_phi_fu_201_p4);

endmodule //read_data
