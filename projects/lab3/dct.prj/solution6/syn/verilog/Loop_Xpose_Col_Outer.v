// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Xpose_Col_Outer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        col_outbuf_i_address0,
        col_outbuf_i_ce0,
        col_outbuf_i_q0,
        buf_2d_out_address0,
        buf_2d_out_ce0,
        buf_2d_out_we0,
        buf_2d_out_d0
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state4 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] col_outbuf_i_address0;
output   col_outbuf_i_ce0;
input  [15:0] col_outbuf_i_q0;
output  [5:0] buf_2d_out_address0;
output   buf_2d_out_ce0;
output   buf_2d_out_we0;
output  [15:0] buf_2d_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_outbuf_i_ce0;
reg buf_2d_out_ce0;
reg buf_2d_out_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_69;
reg   [3:0] j_1_i_reg_80;
reg   [3:0] i_3_i_reg_91;
wire   [0:0] exitcond_flatten_fu_102_p2;
reg   [0:0] exitcond_flatten_reg_200;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [6:0] indvar_flatten_next_fu_108_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] i_3_i_mid2_fu_126_p3;
reg   [3:0] i_3_i_mid2_reg_209;
wire   [3:0] j_1_i_cast5_mid2_v_fu_134_p3;
reg   [3:0] j_1_i_cast5_mid2_v_reg_214;
wire   [3:0] i_fu_169_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] j_1_i_phi_fu_84_p4;
wire   [31:0] tmp_24_cast_fu_164_p1;
wire   [31:0] tmp_25_cast_fu_195_p1;
wire   [0:0] tmp_s_fu_120_p2;
wire   [3:0] j_fu_114_p2;
wire   [6:0] tmp_18_fu_146_p3;
wire   [7:0] j_1_i_cast5_mid2_cas_fu_142_p1;
wire   [7:0] tmp_23_cast_fu_154_p1;
wire   [7:0] tmp_19_fu_158_p2;
wire   [6:0] tmp_fu_175_p3;
wire   [7:0] i_3_i_cast4_cast_fu_186_p1;
wire   [7:0] tmp_21_cast_fu_182_p1;
wire   [7:0] tmp_20_fu_189_p2;
wire   [0:0] ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_102_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_102_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_102_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_102_p2 == 1'b0))) begin
        i_3_i_reg_91 <= i_fu_169_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        i_3_i_reg_91 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_102_p2 == 1'b0))) begin
        indvar_flatten_reg_69 <= indvar_flatten_next_fu_108_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_69 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_200 == 1'b0))) begin
        j_1_i_reg_80 <= j_1_i_cast5_mid2_v_reg_214;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        j_1_i_reg_80 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        exitcond_flatten_reg_200 <= exitcond_flatten_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_102_p2 == 1'b0))) begin
        i_3_i_mid2_reg_209 <= i_3_i_mid2_fu_126_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_102_p2 == 1'b0))) begin
        j_1_i_cast5_mid2_v_reg_214 <= j_1_i_cast5_mid2_v_fu_134_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_2d_out_ce0 = 1'b1;
    end else begin
        buf_2d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_200 == 1'b0))) begin
        buf_2d_out_we0 = 1'b1;
    end else begin
        buf_2d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        col_outbuf_i_ce0 = 1'b1;
    end else begin
        col_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_200 == 1'b0))) begin
        j_1_i_phi_fu_84_p4 = j_1_i_cast5_mid2_v_reg_214;
    end else begin
        j_1_i_phi_fu_84_p4 = j_1_i_reg_80;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_102_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_2];

assign buf_2d_out_address0 = tmp_25_cast_fu_195_p1;

assign buf_2d_out_d0 = col_outbuf_i_q0;

assign col_outbuf_i_address0 = tmp_24_cast_fu_164_p1;

assign exitcond_flatten_fu_102_p2 = ((indvar_flatten_reg_69 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign i_3_i_cast4_cast_fu_186_p1 = i_3_i_mid2_reg_209;

assign i_3_i_mid2_fu_126_p3 = ((tmp_s_fu_120_p2[0:0] === 1'b1) ? ap_const_lv4_0 : i_3_i_reg_91);

assign i_fu_169_p2 = (i_3_i_mid2_fu_126_p3 + ap_const_lv4_1);

assign indvar_flatten_next_fu_108_p2 = (indvar_flatten_reg_69 + ap_const_lv7_1);

assign j_1_i_cast5_mid2_cas_fu_142_p1 = j_1_i_cast5_mid2_v_fu_134_p3;

assign j_1_i_cast5_mid2_v_fu_134_p3 = ((tmp_s_fu_120_p2[0:0] === 1'b1) ? j_fu_114_p2 : j_1_i_phi_fu_84_p4);

assign j_fu_114_p2 = (j_1_i_phi_fu_84_p4 + ap_const_lv4_1);

assign tmp_18_fu_146_p3 = {{i_3_i_mid2_fu_126_p3}, {ap_const_lv3_0}};

assign tmp_19_fu_158_p2 = (j_1_i_cast5_mid2_cas_fu_142_p1 + tmp_23_cast_fu_154_p1);

assign tmp_20_fu_189_p2 = (i_3_i_cast4_cast_fu_186_p1 + tmp_21_cast_fu_182_p1);

assign tmp_21_cast_fu_182_p1 = tmp_fu_175_p3;

assign tmp_23_cast_fu_154_p1 = tmp_18_fu_146_p3;

assign tmp_24_cast_fu_164_p1 = tmp_19_fu_158_p2;

assign tmp_25_cast_fu_195_p1 = tmp_20_fu_189_p2;

assign tmp_fu_175_p3 = {{j_1_i_cast5_mid2_v_reg_214}, {ap_const_lv3_0}};

assign tmp_s_fu_120_p2 = ((i_3_i_reg_91 == ap_const_lv4_8) ? 1'b1 : 1'b0);

endmodule //Loop_Xpose_Col_Outer
