-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Col_DCT_Loop_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_inbuf_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce0 : OUT STD_LOGIC;
    col_inbuf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_inbuf_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_inbuf_ce1 : OUT STD_LOGIC;
    col_inbuf_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    col_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_outbuf_i_ce0 : OUT STD_LOGIC;
    col_outbuf_i_we0 : OUT STD_LOGIC;
    col_outbuf_i_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_Col_DCT_Loop_pr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_i_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_273 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal reg_277 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_586 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_cast_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_cast_reg_591 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_inbuf_addr_reg_596 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_1_reg_601 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_2_reg_606 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_3_reg_611 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_4_reg_616 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_5_reg_621 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_6_reg_626 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_addr_7_reg_631 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_i_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_640 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_cast1_i_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast1_i_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_36_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_1_lo_reg_675 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_lo_reg_680 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_0_lo_reg_690 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_1_i_fu_526_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_1_i_reg_695 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_3_i_fu_532_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_3_i_reg_705 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_5_lo_reg_715 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_lo_reg_730 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_lo_reg_735 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_5_i_fu_545_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_5_i_reg_740 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_6_lo_reg_745 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_lo_reg_750 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_538_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_reg_755 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_484_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_484_p2 : signal is "no";
    signal tmp_reg_760 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_559_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_reg_765 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_566_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_770 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_2_i_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal k_i_phi_fu_266_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_316_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_cast_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_293_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_310_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_325_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_355_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_385_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_400_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_cast1_i_cast_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_551_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_fu_506_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp3_fu_506_p2 : signal is "no";
    signal tmp_9_i_fu_510_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_538_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_573_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_538_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mul_mul_15s_1jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_1d_1_dct_coefbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_1d_1_dct_coefcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coeffYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_0_U : component dct_1d_1_dct_coefbkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_1d_1_dct_coefcud
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_1d_1_dct_coefdEe
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_1d_1_dct_coefeOg
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_1d_1_dct_coeffYi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_1d_1_dct_coefg8j
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_1d_1_dct_coefhbi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_1d_1_dct_coefibs
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dct_mul_mul_15s_1jbC_x_U49 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_1_lo_reg_675,
        din1 => reg_273,
        dout => tmp_3_1_i_fu_526_p2);

    dct_mul_mul_15s_1jbC_x_U50 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_3_lo_reg_680,
        din1 => reg_277,
        dout => tmp_3_3_i_fu_532_p2);

    dct_mac_muladd_14kbM_x_U51 : component dct_mac_muladd_14kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_538_p0,
        din1 => reg_273,
        din2 => tmp_3_1_i_reg_695,
        dout => grp_fu_538_p3);

    dct_mul_mul_15s_1jbC_x_U52 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_5_lo_reg_715,
        din1 => reg_277,
        dout => tmp_3_5_i_fu_545_p2);

    dct_mac_muladd_15lbW_x_U53 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_2_lo_reg_730,
        din1 => reg_273,
        din2 => tmp_3_3_i_reg_705,
        dout => grp_fu_551_p3);

    dct_mac_muladd_15lbW_x_U54 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_4_lo_reg_735,
        din1 => reg_277,
        din2 => tmp_3_5_i_reg_740,
        dout => grp_fu_559_p3);

    dct_mac_muladd_15lbW_x_U55 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_6_lo_reg_745,
        din1 => reg_273,
        din2 => grp_fu_573_p3,
        dout => grp_fu_566_p3);

    dct_mac_muladd_15mb6_x_U56 : component dct_mac_muladd_15mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_7_lo_reg_750,
        din1 => reg_277,
        din2 => grp_fu_573_p2,
        dout => grp_fu_573_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_5_fu_281_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_i_fu_415_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_5_fu_281_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_5_fu_281_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and not((tmp_i_reg_636 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_2_i_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                i_2_i_reg_251 <= i_reg_586;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                i_2_i_reg_251 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                k_i_reg_262 <= k_reg_640;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_5_fu_281_p2))) then 
                k_i_reg_262 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_tmp_36_reg_655 <= tmp_36_reg_655;
                ap_pipeline_reg_pp0_iter1_tmp_i_reg_636 <= tmp_i_reg_636;
                tmp_i_reg_636 <= tmp_i_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_5_fu_281_p2))) then
                    col_inbuf_addr_1_reg_601(5 downto 3) <= tmp_23_fu_316_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_2_reg_606(5 downto 3) <= tmp_25_fu_331_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_3_reg_611(5 downto 3) <= tmp_27_fu_346_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_4_reg_616(5 downto 3) <= tmp_29_fu_361_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_5_reg_621(5 downto 3) <= tmp_31_fu_376_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_6_reg_626(5 downto 3) <= tmp_33_fu_391_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_7_reg_631(5 downto 3) <= tmp_35_fu_406_p3(6 - 1 downto 0)(5 downto 3);
                    col_inbuf_addr_reg_596(5 downto 3) <= tmp_21_fu_301_p1(6 - 1 downto 0)(5 downto 3);
                    tmp_27_cast_reg_591(6 downto 3) <= tmp_27_cast_fu_306_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                dct_coeff_table_0_lo_reg_690 <= dct_coeff_table_0_q0;
                dct_coeff_table_5_lo_reg_715 <= dct_coeff_table_5_q0;
                tmp_3_1_i_reg_695 <= tmp_3_1_i_fu_526_p2;
                tmp_3_3_i_reg_705 <= tmp_3_3_i_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (tmp_i_reg_636 = ap_const_lv1_0))) then
                dct_coeff_table_1_lo_reg_675 <= dct_coeff_table_1_q0;
                dct_coeff_table_3_lo_reg_680 <= dct_coeff_table_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                dct_coeff_table_2_lo_reg_730 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_lo_reg_735 <= dct_coeff_table_4_q0;
                dct_coeff_table_6_lo_reg_745 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_lo_reg_750 <= dct_coeff_table_7_q0;
                tmp_3_5_i_reg_740 <= tmp_3_5_i_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_reg_586 <= i_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_i_fu_415_p2))) then
                    k_cast1_i_reg_645(3 downto 0) <= k_cast1_i_fu_427_p1(3 downto 0);
                tmp_36_reg_655 <= tmp_36_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                k_reg_640 <= k_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_i_reg_636 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                reg_273 <= col_inbuf_q0;
                reg_277 <= col_inbuf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                tmp1_reg_755 <= grp_fu_538_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                tmp4_reg_765 <= grp_fu_559_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_i_reg_636))) then
                tmp5_reg_770 <= grp_fu_566_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_760 <= tmp_fu_484_p2;
            end if;
        end if;
    end process;
    tmp_27_cast_reg_591(2 downto 0) <= "000";
    tmp_27_cast_reg_591(7) <= '0';
    col_inbuf_addr_reg_596(2 downto 0) <= "000";
    col_inbuf_addr_1_reg_601(2 downto 0) <= "001";
    col_inbuf_addr_2_reg_606(2 downto 0) <= "010";
    col_inbuf_addr_3_reg_611(2 downto 0) <= "011";
    col_inbuf_addr_4_reg_616(2 downto 0) <= "100";
    col_inbuf_addr_5_reg_621(2 downto 0) <= "101";
    col_inbuf_addr_6_reg_626(2 downto 0) <= "110";
    col_inbuf_addr_7_reg_631(2 downto 0) <= "111";
    k_cast1_i_reg_645(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, tmp_5_fu_281_p2, tmp_i_fu_415_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = tmp_5_fu_281_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = tmp_i_fu_415_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);

    ap_done_assign_proc : process(ap_done_reg, tmp_5_fu_281_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_5_fu_281_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_5_fu_281_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_5_fu_281_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, col_inbuf_addr_reg_596, col_inbuf_addr_1_reg_601, col_inbuf_addr_2_reg_606, col_inbuf_addr_6_reg_626)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                col_inbuf_address0 <= col_inbuf_addr_6_reg_626;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                col_inbuf_address0 <= col_inbuf_addr_2_reg_606;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                col_inbuf_address0 <= col_inbuf_addr_reg_596;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                col_inbuf_address0 <= col_inbuf_addr_1_reg_601;
            else 
                col_inbuf_address0 <= "XXXXXX";
            end if;
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, col_inbuf_addr_3_reg_611, col_inbuf_addr_4_reg_616, col_inbuf_addr_5_reg_621, col_inbuf_addr_7_reg_631)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                col_inbuf_address1 <= col_inbuf_addr_7_reg_631;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                col_inbuf_address1 <= col_inbuf_addr_4_reg_616;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                col_inbuf_address1 <= col_inbuf_addr_5_reg_621;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                col_inbuf_address1 <= col_inbuf_addr_3_reg_611;
            else 
                col_inbuf_address1 <= "XXXXXX";
            end if;
        else 
            col_inbuf_address1 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            col_inbuf_ce1 <= ap_const_logic_1;
        else 
            col_inbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_address0 <= tmp_42_cast_fu_502_p1(6 - 1 downto 0);

    col_outbuf_i_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            col_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            col_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_d0 <= tmp_9_i_fu_510_p2(28 downto 13);

    col_outbuf_i_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_pipeline_reg_pp0_iter1_tmp_i_reg_636)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_i_reg_636)))) then 
            col_outbuf_i_we0 <= ap_const_logic_1;
        else 
            col_outbuf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= k_cast1_i_reg_645(3 - 1 downto 0);

    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= k_cast1_i_fu_427_p1(3 - 1 downto 0);

    dct_coeff_table_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= k_cast1_i_reg_645(3 - 1 downto 0);

    dct_coeff_table_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= k_cast1_i_fu_427_p1(3 - 1 downto 0);

    dct_coeff_table_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= k_cast1_i_reg_645(3 - 1 downto 0);

    dct_coeff_table_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= k_cast1_i_reg_645(3 - 1 downto 0);

    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= k_cast1_i_reg_645(3 - 1 downto 0);

    dct_coeff_table_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= k_cast1_i_reg_645(3 - 1 downto 0);

    dct_coeff_table_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_538_p0 <= grp_fu_538_p00(14 - 1 downto 0);
    grp_fu_538_p00 <= std_logic_vector(resize(unsigned(dct_coeff_table_0_lo_reg_690),29));
    grp_fu_573_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    i_fu_287_p2 <= std_logic_vector(unsigned(i_2_i_reg_251) + unsigned(ap_const_lv4_1));
    k_cast1_i_cast_fu_433_p1 <= std_logic_vector(resize(unsigned(k_i_phi_fu_266_p4),8));
    k_cast1_i_fu_427_p1 <= std_logic_vector(resize(unsigned(k_i_phi_fu_266_p4),32));
    k_fu_421_p2 <= std_logic_vector(unsigned(k_i_phi_fu_266_p4) + unsigned(ap_const_lv4_1));

    k_i_phi_fu_266_p4_assign_proc : process(k_i_reg_262, tmp_i_reg_636, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, k_reg_640)
    begin
        if (((tmp_i_reg_636 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            k_i_phi_fu_266_p4 <= k_reg_640;
        else 
            k_i_phi_fu_266_p4 <= k_i_reg_262;
        end if; 
    end process;

    tmp3_fu_506_p2 <= std_logic_vector(signed(tmp4_reg_765) + signed(tmp5_reg_770));
    tmp_21_fu_301_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_293_p3),32));
    tmp_22_fu_310_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_1);
    tmp_23_fu_316_p3 <= (ap_const_lv25_0 & tmp_22_fu_310_p2);
    tmp_24_fu_325_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_2);
    tmp_25_fu_331_p3 <= (ap_const_lv25_0 & tmp_24_fu_325_p2);
    tmp_26_fu_340_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_3);
    tmp_27_cast_fu_306_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_293_p3),8));
    tmp_27_fu_346_p3 <= (ap_const_lv25_0 & tmp_26_fu_340_p2);
    tmp_28_fu_355_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_4);
    tmp_29_fu_361_p3 <= (ap_const_lv25_0 & tmp_28_fu_355_p2);
    tmp_30_fu_370_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_5);
    tmp_31_fu_376_p3 <= (ap_const_lv25_0 & tmp_30_fu_370_p2);
    tmp_32_fu_385_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_6);
    tmp_33_fu_391_p3 <= (ap_const_lv25_0 & tmp_32_fu_385_p2);
    tmp_34_fu_400_p2 <= (tmp_s_fu_293_p3 or ap_const_lv7_7);
    tmp_35_fu_406_p3 <= (ap_const_lv25_0 & tmp_34_fu_400_p2);
    tmp_36_fu_437_p2 <= std_logic_vector(unsigned(tmp_27_cast_reg_591) + unsigned(k_cast1_i_cast_fu_433_p1));
    tmp_42_cast_fu_502_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_tmp_36_reg_655),32));
    tmp_5_fu_281_p2 <= "1" when (i_2_i_reg_251 = ap_const_lv4_8) else "0";
    tmp_9_i_fu_510_p2 <= std_logic_vector(unsigned(tmp_reg_760) + unsigned(tmp3_fu_506_p2));
    tmp_fu_484_p2 <= std_logic_vector(signed(tmp1_reg_755) + signed(grp_fu_551_p3));
    tmp_i_fu_415_p2 <= "1" when (k_i_phi_fu_266_p4 = ap_const_lv4_8) else "0";
    tmp_s_fu_293_p3 <= (i_2_i_reg_251 & ap_const_lv3_0);
end behav;
