-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_1d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_0_ce0 : OUT STD_LOGIC;
    src_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_0_ce1 : OUT STD_LOGIC;
    src_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_1_ce0 : OUT STD_LOGIC;
    src_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_1_ce1 : OUT STD_LOGIC;
    src_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_2_ce0 : OUT STD_LOGIC;
    src_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_2_ce1 : OUT STD_LOGIC;
    src_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_3_ce0 : OUT STD_LOGIC;
    src_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_3_ce1 : OUT STD_LOGIC;
    src_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_4_ce0 : OUT STD_LOGIC;
    src_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_4_ce1 : OUT STD_LOGIC;
    src_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_5_ce0 : OUT STD_LOGIC;
    src_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_5_ce1 : OUT STD_LOGIC;
    src_5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_6_ce0 : OUT STD_LOGIC;
    src_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_6_ce1 : OUT STD_LOGIC;
    src_6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_7_ce0 : OUT STD_LOGIC;
    src_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    src_7_ce1 : OUT STD_LOGIC;
    src_7_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    i_2_i : IN STD_LOGIC_VECTOR (3 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    i_2_i1 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dct_1d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_14_ce0 : STD_LOGIC;
    signal dct_coeff_table_14_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_13_ce0 : STD_LOGIC;
    signal dct_coeff_table_13_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_12_ce0 : STD_LOGIC;
    signal dct_coeff_table_12_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_11_ce0 : STD_LOGIC;
    signal dct_coeff_table_11_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_10_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_10_ce0 : STD_LOGIC;
    signal dct_coeff_table_10_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_9_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_9_ce0 : STD_LOGIC;
    signal dct_coeff_table_9_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_8_ce0 : STD_LOGIC;
    signal dct_coeff_table_8_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_ce0 : STD_LOGIC;
    signal dct_coeff_table_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_782 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_793_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_814_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_839 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_cast_fu_851_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_cast_reg_1026 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_855_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_reg_1031 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_865_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_1361 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_cast1_fu_871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast1_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_1376 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_14_reg_1376 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_13_l_reg_1396 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_11_l_reg_1401 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_14_l_reg_1411 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_1_fu_970_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_1_reg_1416 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_3_fu_976_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_3_reg_1426 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_9_lo_reg_1436 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_12_l_reg_1451 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_10_l_reg_1456 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_5_fu_989_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_5_reg_1461 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_8_lo_reg_1466 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_load_reg_1471 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_982_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp2_reg_1476 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp1_fu_928_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp1_fu_928_p2 : signal is "no";
    signal tmp1_reg_1481 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1003_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_1486 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1010_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_reg_1491 : STD_LOGIC_VECTOR (28 downto 0);
    signal k_phi_fu_786_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_cast_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_843_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_cast1_cast_fu_877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_995_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_950_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp4_fu_950_p2 : signal is "no";
    signal tmp_9_fu_954_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_982_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1017_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1017_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_982_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mux_83_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_mul_mul_15s_1jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_1d_1_dct_coefbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_1d_1_dct_coefcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coeffYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_1d_1_dct_coefibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    dct_coeff_table_14_U : component dct_1d_1_dct_coefbkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_14_address0,
        ce0 => dct_coeff_table_14_ce0,
        q0 => dct_coeff_table_14_q0);

    dct_coeff_table_13_U : component dct_1d_1_dct_coefcud
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_13_address0,
        ce0 => dct_coeff_table_13_ce0,
        q0 => dct_coeff_table_13_q0);

    dct_coeff_table_12_U : component dct_1d_1_dct_coefdEe
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_12_address0,
        ce0 => dct_coeff_table_12_ce0,
        q0 => dct_coeff_table_12_q0);

    dct_coeff_table_11_U : component dct_1d_1_dct_coefeOg
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_11_address0,
        ce0 => dct_coeff_table_11_ce0,
        q0 => dct_coeff_table_11_q0);

    dct_coeff_table_10_U : component dct_1d_1_dct_coeffYi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_10_address0,
        ce0 => dct_coeff_table_10_ce0,
        q0 => dct_coeff_table_10_q0);

    dct_coeff_table_9_U : component dct_1d_1_dct_coefg8j
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_9_address0,
        ce0 => dct_coeff_table_9_ce0,
        q0 => dct_coeff_table_9_q0);

    dct_coeff_table_8_U : component dct_1d_1_dct_coefhbi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_8_address0,
        ce0 => dct_coeff_table_8_ce0,
        q0 => dct_coeff_table_8_q0);

    dct_coeff_table_U : component dct_1d_1_dct_coefibs
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_address0,
        ce0 => dct_coeff_table_ce0,
        q0 => dct_coeff_table_q0);

    dct_mux_83_16_1_U9 : component dct_mux_83_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din1 => src_0_q0,
        din2 => src_1_q0,
        din3 => src_2_q0,
        din4 => src_3_q0,
        din5 => src_4_q0,
        din6 => src_5_q0,
        din7 => src_6_q0,
        din8 => src_7_q0,
        din9 => tmp_13_reg_1031,
        dout => grp_fu_793_p10);

    dct_mux_83_16_1_U10 : component dct_mux_83_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din1 => src_0_q1,
        din2 => src_1_q1,
        din3 => src_2_q1,
        din4 => src_3_q1,
        din5 => src_4_q1,
        din6 => src_5_q1,
        din7 => src_6_q1,
        din8 => src_7_q1,
        din9 => tmp_13_reg_1031,
        dout => grp_fu_814_p10);

    dct_mul_mul_15s_1jbC_U11 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_13_l_reg_1396,
        din1 => reg_835,
        dout => tmp_3_1_fu_970_p2);

    dct_mul_mul_15s_1jbC_U12 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_11_l_reg_1401,
        din1 => reg_839,
        dout => tmp_3_3_fu_976_p2);

    dct_mac_muladd_14kbM_U13 : component dct_mac_muladd_14kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_982_p0,
        din1 => reg_835,
        din2 => tmp_3_1_reg_1416,
        dout => grp_fu_982_p3);

    dct_mul_mul_15s_1jbC_U14 : component dct_mul_mul_15s_1jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_9_lo_reg_1436,
        din1 => reg_839,
        dout => tmp_3_5_fu_989_p2);

    dct_mac_muladd_15lbW_U15 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_12_l_reg_1451,
        din1 => reg_835,
        din2 => tmp_3_3_reg_1426,
        dout => grp_fu_995_p3);

    dct_mac_muladd_15lbW_U16 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_10_l_reg_1456,
        din1 => reg_839,
        din2 => tmp_3_5_reg_1461,
        dout => grp_fu_1003_p3);

    dct_mac_muladd_15lbW_U17 : component dct_mac_muladd_15lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_8_lo_reg_1466,
        din1 => reg_835,
        din2 => grp_fu_1017_p3,
        dout => grp_fu_1010_p3);

    dct_mac_muladd_15mb6_U18 : component dct_mac_muladd_15mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_load_reg_1471,
        din1 => reg_839,
        din2 => grp_fu_1017_p2,
        dout => grp_fu_1017_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_fu_859_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and not((tmp_reg_1357 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_782_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                k_reg_782 <= k_1_reg_1361;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_782 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_tmp_14_reg_1376 <= tmp_14_reg_1376;
                ap_pipeline_reg_pp0_iter1_tmp_reg_1357 <= tmp_reg_1357;
                tmp_reg_1357 <= tmp_fu_859_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                dct_coeff_table_10_l_reg_1456 <= dct_coeff_table_10_q0;
                dct_coeff_table_12_l_reg_1451 <= dct_coeff_table_12_q0;
                dct_coeff_table_8_lo_reg_1466 <= dct_coeff_table_8_q0;
                dct_coeff_table_load_reg_1471 <= dct_coeff_table_q0;
                tmp_3_5_reg_1461 <= tmp_3_5_fu_989_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1357 = ap_const_lv1_0))) then
                dct_coeff_table_11_l_reg_1401 <= dct_coeff_table_11_q0;
                dct_coeff_table_13_l_reg_1396 <= dct_coeff_table_13_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                dct_coeff_table_14_l_reg_1411 <= dct_coeff_table_14_q0;
                dct_coeff_table_9_lo_reg_1436 <= dct_coeff_table_9_q0;
                tmp_3_1_reg_1416 <= tmp_3_1_fu_970_p2;
                tmp_3_3_reg_1426 <= tmp_3_3_fu_976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                k_1_reg_1361 <= k_1_fu_865_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_fu_859_p2))) then
                    k_cast1_reg_1366(3 downto 0) <= k_cast1_fu_871_p1(3 downto 0);
                tmp_14_reg_1376 <= tmp_14_fu_881_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_reg_1357 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                reg_835 <= grp_fu_793_p10;
                reg_839 <= grp_fu_814_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                tmp1_reg_1481 <= tmp1_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                tmp2_reg_1476 <= grp_fu_982_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                tmp5_reg_1486 <= grp_fu_1003_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_reg_1357))) then
                tmp6_reg_1491 <= grp_fu_1010_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_13_reg_1031 <= tmp_13_fu_855_p1;
                    tmp_14_cast_reg_1026(6 downto 3) <= tmp_14_cast_fu_851_p1(6 downto 3);
            end if;
        end if;
    end process;
    tmp_14_cast_reg_1026(2 downto 0) <= "000";
    tmp_14_cast_reg_1026(7) <= '0';
    k_cast1_reg_1366(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, tmp_fu_859_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = tmp_fu_859_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state9 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_10_address0 <= k_cast1_reg_1366(3 - 1 downto 0);

    dct_coeff_table_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_10_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_11_address0 <= k_cast1_fu_871_p1(3 - 1 downto 0);

    dct_coeff_table_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_11_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_12_address0 <= k_cast1_reg_1366(3 - 1 downto 0);

    dct_coeff_table_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_12_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_13_address0 <= k_cast1_fu_871_p1(3 - 1 downto 0);

    dct_coeff_table_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_13_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_14_address0 <= k_cast1_reg_1366(3 - 1 downto 0);

    dct_coeff_table_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_14_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_8_address0 <= k_cast1_reg_1366(3 - 1 downto 0);

    dct_coeff_table_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_8_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_9_address0 <= k_cast1_reg_1366(3 - 1 downto 0);

    dct_coeff_table_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_9_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_address0 <= k_cast1_reg_1366(3 - 1 downto 0);

    dct_coeff_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= tmp_15_cast_fu_946_p1(6 - 1 downto 0);

    dst_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_d0 <= tmp_9_fu_954_p2(28 downto 13);

    dst_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_pipeline_reg_pp0_iter1_tmp_reg_1357)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_reg_1357)))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1017_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_982_p0 <= grp_fu_982_p00(14 - 1 downto 0);
    grp_fu_982_p00 <= std_logic_vector(resize(unsigned(dct_coeff_table_14_l_reg_1411),29));
    k_1_fu_865_p2 <= std_logic_vector(unsigned(k_phi_fu_786_p4) + unsigned(ap_const_lv4_1));
    k_cast1_cast_fu_877_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_786_p4),8));
    k_cast1_fu_871_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_786_p4),32));

    k_phi_fu_786_p4_assign_proc : process(k_reg_782, tmp_reg_1357, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, k_1_reg_1361)
    begin
        if (((tmp_reg_1357 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            k_phi_fu_786_p4 <= k_1_reg_1361;
        else 
            k_phi_fu_786_p4 <= k_reg_782;
        end if; 
    end process;


    src_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_0_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_0_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_0_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_0_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_0_address0 <= "XXX";
            end if;
        else 
            src_0_address0 <= "XXX";
        end if; 
    end process;


    src_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_0_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_0_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_0_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_0_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_0_address1 <= "XXX";
            end if;
        else 
            src_0_address1 <= "XXX";
        end if; 
    end process;


    src_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_0_ce0 <= ap_const_logic_1;
        else 
            src_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_0_ce1 <= ap_const_logic_1;
        else 
            src_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_1_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_1_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_1_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_1_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_1_address0 <= "XXX";
            end if;
        else 
            src_1_address0 <= "XXX";
        end if; 
    end process;


    src_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_1_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_1_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_1_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_1_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_1_address1 <= "XXX";
            end if;
        else 
            src_1_address1 <= "XXX";
        end if; 
    end process;


    src_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_1_ce0 <= ap_const_logic_1;
        else 
            src_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_1_ce1 <= ap_const_logic_1;
        else 
            src_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_2_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_2_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_2_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_2_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_2_address0 <= "XXX";
            end if;
        else 
            src_2_address0 <= "XXX";
        end if; 
    end process;


    src_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_2_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_2_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_2_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_2_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_2_address1 <= "XXX";
            end if;
        else 
            src_2_address1 <= "XXX";
        end if; 
    end process;


    src_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_2_ce0 <= ap_const_logic_1;
        else 
            src_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_2_ce1 <= ap_const_logic_1;
        else 
            src_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_3_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_3_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_3_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_3_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_3_address0 <= "XXX";
            end if;
        else 
            src_3_address0 <= "XXX";
        end if; 
    end process;


    src_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_3_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_3_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_3_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_3_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_3_address1 <= "XXX";
            end if;
        else 
            src_3_address1 <= "XXX";
        end if; 
    end process;


    src_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_3_ce0 <= ap_const_logic_1;
        else 
            src_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_3_ce1 <= ap_const_logic_1;
        else 
            src_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_4_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_4_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_4_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_4_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_4_address0 <= "XXX";
            end if;
        else 
            src_4_address0 <= "XXX";
        end if; 
    end process;


    src_4_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_4_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_4_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_4_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_4_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_4_address1 <= "XXX";
            end if;
        else 
            src_4_address1 <= "XXX";
        end if; 
    end process;


    src_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_4_ce0 <= ap_const_logic_1;
        else 
            src_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_4_ce1 <= ap_const_logic_1;
        else 
            src_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_5_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_5_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_5_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_5_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_5_address0 <= "XXX";
            end if;
        else 
            src_5_address0 <= "XXX";
        end if; 
    end process;


    src_5_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_5_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_5_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_5_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_5_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_5_address1 <= "XXX";
            end if;
        else 
            src_5_address1 <= "XXX";
        end if; 
    end process;


    src_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_5_ce0 <= ap_const_logic_1;
        else 
            src_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_5_ce1 <= ap_const_logic_1;
        else 
            src_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_6_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_6_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_6_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_6_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_6_address0 <= "XXX";
            end if;
        else 
            src_6_address0 <= "XXX";
        end if; 
    end process;


    src_6_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_6_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_6_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_6_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_6_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_6_address1 <= "XXX";
            end if;
        else 
            src_6_address1 <= "XXX";
        end if; 
    end process;


    src_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_6_ce0 <= ap_const_logic_1;
        else 
            src_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_6_ce1 <= ap_const_logic_1;
        else 
            src_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    src_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_7_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_7_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_7_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_7_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                src_7_address0 <= "XXX";
            end if;
        else 
            src_7_address0 <= "XXX";
        end if; 
    end process;


    src_7_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                src_7_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                src_7_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                src_7_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                src_7_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                src_7_address1 <= "XXX";
            end if;
        else 
            src_7_address1 <= "XXX";
        end if; 
    end process;


    src_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_7_ce0 <= ap_const_logic_1;
        else 
            src_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_7_ce1 <= ap_const_logic_1;
        else 
            src_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_928_p2 <= std_logic_vector(signed(tmp2_reg_1476) + signed(grp_fu_995_p3));
    tmp4_fu_950_p2 <= std_logic_vector(signed(tmp5_reg_1486) + signed(tmp6_reg_1491));
    tmp_12_fu_843_p3 <= (i_2_i1 & ap_const_lv3_0);
    tmp_13_fu_855_p1 <= i_2_i(3 - 1 downto 0);
    tmp_14_cast_fu_851_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_843_p3),8));
    tmp_14_fu_881_p2 <= std_logic_vector(unsigned(tmp_14_cast_reg_1026) + unsigned(k_cast1_cast_fu_877_p1));
    tmp_15_cast_fu_946_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_tmp_14_reg_1376),32));
    tmp_9_fu_954_p2 <= std_logic_vector(unsigned(tmp1_reg_1481) + unsigned(tmp4_fu_950_p2));
    tmp_fu_859_p2 <= "1" when (k_phi_fu_786_p4 = ap_const_lv4_8) else "0";
end behav;
