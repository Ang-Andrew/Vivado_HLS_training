-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_block_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_0_ce0 : OUT STD_LOGIC;
    in_block_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_0_ce1 : OUT STD_LOGIC;
    in_block_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_1_ce0 : OUT STD_LOGIC;
    in_block_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_1_ce1 : OUT STD_LOGIC;
    in_block_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_2_ce0 : OUT STD_LOGIC;
    in_block_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_2_ce1 : OUT STD_LOGIC;
    in_block_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_3_ce0 : OUT STD_LOGIC;
    in_block_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_3_ce1 : OUT STD_LOGIC;
    in_block_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_4_ce0 : OUT STD_LOGIC;
    in_block_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_4_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_4_ce1 : OUT STD_LOGIC;
    in_block_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_5_ce0 : OUT STD_LOGIC;
    in_block_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_5_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_5_ce1 : OUT STD_LOGIC;
    in_block_5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_6_ce0 : OUT STD_LOGIC;
    in_block_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_6_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_6_ce1 : OUT STD_LOGIC;
    in_block_6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_7_ce0 : OUT STD_LOGIC;
    in_block_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_block_7_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    in_block_7_ce1 : OUT STD_LOGIC;
    in_block_7_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_block_ce0 : OUT STD_LOGIC;
    out_block_we0 : OUT STD_LOGIC;
    out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_14_ce0 : STD_LOGIC;
    signal dct_coeff_table_14_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_13_ce0 : STD_LOGIC;
    signal dct_coeff_table_13_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_12_ce0 : STD_LOGIC;
    signal dct_coeff_table_12_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_11_ce0 : STD_LOGIC;
    signal dct_coeff_table_11_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_10_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_10_ce0 : STD_LOGIC;
    signal dct_coeff_table_10_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_9_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_9_ce0 : STD_LOGIC;
    signal dct_coeff_table_9_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_8_ce0 : STD_LOGIC;
    signal dct_coeff_table_8_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_ce0 : STD_LOGIC;
    signal dct_coeff_table_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_0_ce0 : STD_LOGIC;
    signal dct_coeff_table_0_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dct_coeff_table_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_1_ce0 : STD_LOGIC;
    signal dct_coeff_table_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_2_ce0 : STD_LOGIC;
    signal dct_coeff_table_2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_3_ce0 : STD_LOGIC;
    signal dct_coeff_table_3_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_4_ce0 : STD_LOGIC;
    signal dct_coeff_table_4_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_5_ce0 : STD_LOGIC;
    signal dct_coeff_table_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_6_ce0 : STD_LOGIC;
    signal dct_coeff_table_6_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_7_ce0 : STD_LOGIC;
    signal dct_coeff_table_7_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_1032 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_1043 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_reg_1055 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_1066 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_1088 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i1_reg_1110 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten1_reg_1121 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_1132 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_1143 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1154_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_2222 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_1175_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1200 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_flatten_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_1210_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_2226 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i3_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_reg_2231 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_i_mid2_fu_1222_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_mid2_reg_2236 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter1_k_i_mid2_reg_2236 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_cast_fu_1230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_i_cast_reg_2242 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_mid2_v_fu_1242_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_mid2_v_reg_2262 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_pipeline_reg_pp0_iter1_i_cast_mid2_v_reg_2262 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1249_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_reg_2268 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_13_l_reg_2279 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_11_l_reg_2284 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_14_l_reg_2294 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_1_i_fu_1796_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_1_i_reg_2299 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_3_i_fu_1802_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_3_i_reg_2309 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_9_lo_reg_2319 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_12_l_reg_2334 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_10_l_reg_2339 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_5_i_fu_1815_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_5_i_reg_2344 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_8_lo_reg_2349 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_load_reg_2354 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1808_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp7_reg_2359 : STD_LOGIC_VECTOR (28 downto 0);
    signal k_fu_1283_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_2364 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp9_fu_1302_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp9_fu_1302_p2 : signal is "no";
    signal tmp9_reg_2369 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1829_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_reg_2374 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1836_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_reg_2379 : STD_LOGIC_VECTOR (28 downto 0);
    signal exitcond_flatten9_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten9_reg_2384 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal indvar_flatten_next8_fu_1371_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_1_mid2_fu_1389_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_mid2_reg_2393 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_mid2_v_fu_1397_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_mid2_v_reg_2398 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_fu_1432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_5_fu_1469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_2418 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_1475_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_reg_2423 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal col_inbuf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_reg_2454 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_1_reg_2459 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal col_inbuf_load_2_reg_2474 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_3_reg_2479 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal col_inbuf_load_4_reg_2494 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_load_5_reg_2499 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_cast_fu_1587_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_cast_reg_2504 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_6_cast_i_fu_1590_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_cast_i_reg_2509 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_cast_i_fu_1593_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_1_cast_i_reg_2514 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_cast_i_fu_1596_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_2_cast_i_reg_2519 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_cast_i_fu_1599_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_3_cast_i_reg_2524 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_4_cast_i_fu_1602_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_4_cast_i_reg_2529 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_cast_i_fu_1605_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_5_cast_i_reg_2534 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_cast_i_fu_1608_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_6_cast_i_reg_2539 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_cast_i_fu_1612_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_7_cast_i_reg_2544 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_i2_fu_1616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_reg_2549 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_pipeline_reg_pp2_iter1_tmp_i2_reg_2549 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter2_tmp_i2_reg_2549 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp2_iter3_tmp_i2_reg_2549 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_1622_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal k_cast1_i_fu_1628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast1_i_reg_2558 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_1641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_2565 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp2_iter1_tmp_39_reg_2565 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp2_iter2_tmp_39_reg_2565 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp2_iter3_tmp_39_reg_2565 : STD_LOGIC_VECTOR (7 downto 0);
    signal dct_coeff_table_1_lo_reg_2600 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_3_lo_reg_2610 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_5_lo_reg_2620 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_6_lo_reg_2625 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_7_lo_reg_2630 : STD_LOGIC_VECTOR (14 downto 0);
    signal dct_coeff_table_0_lo_reg_2635 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_1_i4_fu_1852_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_1_i4_reg_2640 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_2_lo_reg_2645 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_3_i8_fu_1857_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_3_i8_reg_2650 : STD_LOGIC_VECTOR (28 downto 0);
    signal dct_coeff_table_4_lo_reg_2655 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_5_i1_fu_1862_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_5_i1_reg_2660 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1867_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp15_reg_2665 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal tmp_5_i1_reg_2670 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_flatten1_fu_1698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_2675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal indvar_flatten_next1_fu_1704_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal i_3_mid2_fu_1722_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_mid2_reg_2684 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast9_mid2_v_fu_1730_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_cast9_mid2_v_reg_2689 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_1765_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal dst_assign_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dst_assign_ce0 : STD_LOGIC;
    signal dst_assign_we0 : STD_LOGIC;
    signal dst_assign_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_assign_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dst_assign_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dst_assign_1_ce0 : STD_LOGIC;
    signal dst_assign_1_we0 : STD_LOGIC;
    signal dst_assign_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce0 : STD_LOGIC;
    signal col_inbuf_we0 : STD_LOGIC;
    signal col_inbuf_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_inbuf_ce1 : STD_LOGIC;
    signal indvar_flatten_phi_fu_1036_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_phi_fu_1047_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_i_phi_fu_1059_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_phi_fu_1081_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1099 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_1_phi_fu_1136_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_cast_fu_1340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_1427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_1458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1536_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_1550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_1564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_cast_fu_1694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_cast_fu_1760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_cast_fu_1791_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1154_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1175_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_fu_1236_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1821_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_1320_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_cast_fu_1327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_i_cast_cast_fu_1331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_fu_1345_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp6_fu_1345_p2 : signal is "no";
    signal tmp_3_i_fu_1349_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_13_fu_1383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_1377_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_1409_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast_mid2_cast_fu_1405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_cast_fu_1417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_1438_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_cast_cast_fu_1449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_fu_1445_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_1452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_1488_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_1503_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_1517_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_1531_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_1545_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_1559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_1573_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_cast1_i_cast_fu_1637_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1881_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1888_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1895_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp12_fu_1670_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp12_fu_1670_p2 : signal is "no";
    signal tmp16_fu_1674_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp16_fu_1674_p2 : signal is "no";
    signal tmp_3_i1_fu_1678_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_34_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_1710_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_fu_1742_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_cast9_mid2_cast_fu_1738_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_cast_fu_1750_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1754_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_1771_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_cast8_cast_fu_1782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_cast_fu_1778_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_1785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1808_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1843_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1843_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_1_i4_fu_1852_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_3_i8_fu_1857_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_5_i1_fu_1862_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1867_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1873_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1873_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1873_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1881_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1881_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1888_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1895_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1808_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1881_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component dct_mux_83_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_mul_mul_15s_1rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_14sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_15udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_2d_dct_coeff_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dct_2d_dct_coeff_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dct_coeff_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dct_coeff_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dct_coeff_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dct_coeff_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dct_coeff_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dct_coeff_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component dct_2d_dst_assign IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_2d_col_inbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    dct_coeff_table_14_U : component dct_2d_dct_coeff_bkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_14_address0,
        ce0 => dct_coeff_table_14_ce0,
        q0 => dct_coeff_table_14_q0);

    dct_coeff_table_13_U : component dct_2d_dct_coeff_cud
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_13_address0,
        ce0 => dct_coeff_table_13_ce0,
        q0 => dct_coeff_table_13_q0);

    dct_coeff_table_12_U : component dct_2d_dct_coeff_dEe
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_12_address0,
        ce0 => dct_coeff_table_12_ce0,
        q0 => dct_coeff_table_12_q0);

    dct_coeff_table_11_U : component dct_2d_dct_coeff_eOg
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_11_address0,
        ce0 => dct_coeff_table_11_ce0,
        q0 => dct_coeff_table_11_q0);

    dct_coeff_table_10_U : component dct_2d_dct_coeff_fYi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_10_address0,
        ce0 => dct_coeff_table_10_ce0,
        q0 => dct_coeff_table_10_q0);

    dct_coeff_table_9_U : component dct_2d_dct_coeff_g8j
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_9_address0,
        ce0 => dct_coeff_table_9_ce0,
        q0 => dct_coeff_table_9_q0);

    dct_coeff_table_8_U : component dct_2d_dct_coeff_hbi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_8_address0,
        ce0 => dct_coeff_table_8_ce0,
        q0 => dct_coeff_table_8_q0);

    dct_coeff_table_U : component dct_2d_dct_coeff_ibs
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_address0,
        ce0 => dct_coeff_table_ce0,
        q0 => dct_coeff_table_q0);

    dct_coeff_table_0_U : component dct_2d_dct_coeff_bkb
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_0_address0,
        ce0 => dct_coeff_table_0_ce0,
        q0 => dct_coeff_table_0_q0);

    dct_coeff_table_1_U : component dct_2d_dct_coeff_cud
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_1_address0,
        ce0 => dct_coeff_table_1_ce0,
        q0 => dct_coeff_table_1_q0);

    dct_coeff_table_2_U : component dct_2d_dct_coeff_dEe
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_2_address0,
        ce0 => dct_coeff_table_2_ce0,
        q0 => dct_coeff_table_2_q0);

    dct_coeff_table_3_U : component dct_2d_dct_coeff_eOg
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_3_address0,
        ce0 => dct_coeff_table_3_ce0,
        q0 => dct_coeff_table_3_q0);

    dct_coeff_table_4_U : component dct_2d_dct_coeff_fYi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_4_address0,
        ce0 => dct_coeff_table_4_ce0,
        q0 => dct_coeff_table_4_q0);

    dct_coeff_table_5_U : component dct_2d_dct_coeff_g8j
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_5_address0,
        ce0 => dct_coeff_table_5_ce0,
        q0 => dct_coeff_table_5_q0);

    dct_coeff_table_6_U : component dct_2d_dct_coeff_hbi
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_6_address0,
        ce0 => dct_coeff_table_6_ce0,
        q0 => dct_coeff_table_6_q0);

    dct_coeff_table_7_U : component dct_2d_dct_coeff_ibs
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_7_address0,
        ce0 => dct_coeff_table_7_ce0,
        q0 => dct_coeff_table_7_q0);

    dst_assign_U : component dct_2d_dst_assign
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dst_assign_address0,
        ce0 => dst_assign_ce0,
        we0 => dst_assign_we0,
        d0 => dst_assign_d0,
        q0 => dst_assign_q0);

    dst_assign_1_U : component dct_2d_dst_assign
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dst_assign_1_address0,
        ce0 => dst_assign_1_ce0,
        we0 => dst_assign_1_we0,
        d0 => tmp_5_i1_reg_2670,
        q0 => dst_assign_1_q0);

    col_inbuf_U : component dct_2d_col_inbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inbuf_address0,
        ce0 => col_inbuf_ce0,
        we0 => col_inbuf_we0,
        d0 => dst_assign_q0,
        q0 => col_inbuf_q0,
        address1 => col_inbuf_address1,
        ce1 => col_inbuf_ce1,
        q1 => col_inbuf_q1);

    dct_mux_83_16_1_U9 : component dct_mux_83_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din1 => in_block_0_q0,
        din2 => in_block_1_q0,
        din3 => in_block_2_q0,
        din4 => in_block_3_q0,
        din5 => in_block_4_q0,
        din6 => in_block_5_q0,
        din7 => in_block_6_q0,
        din8 => in_block_7_q0,
        din9 => grp_fu_1154_p9,
        dout => grp_fu_1154_p10);

    dct_mux_83_16_1_U10 : component dct_mux_83_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din1 => in_block_0_q1,
        din2 => in_block_1_q1,
        din3 => in_block_2_q1,
        din4 => in_block_3_q1,
        din5 => in_block_4_q1,
        din6 => in_block_5_q1,
        din7 => in_block_6_q1,
        din8 => in_block_7_q1,
        din9 => grp_fu_1175_p9,
        dout => grp_fu_1175_p10);

    dct_mul_mul_15s_1rcU_U11 : component dct_mul_mul_15s_1rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_13_l_reg_2279,
        din1 => reg_1196,
        dout => tmp_7_1_i_fu_1796_p2);

    dct_mul_mul_15s_1rcU_U12 : component dct_mul_mul_15s_1rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_11_l_reg_2284,
        din1 => reg_1200,
        dout => tmp_7_3_i_fu_1802_p2);

    dct_mac_muladd_14sc4_U13 : component dct_mac_muladd_14sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1808_p0,
        din1 => reg_1196,
        din2 => tmp_7_1_i_reg_2299,
        dout => grp_fu_1808_p3);

    dct_mul_mul_15s_1rcU_U14 : component dct_mul_mul_15s_1rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_9_lo_reg_2319,
        din1 => reg_1200,
        dout => tmp_7_5_i_fu_1815_p2);

    dct_mac_muladd_15tde_U15 : component dct_mac_muladd_15tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_12_l_reg_2334,
        din1 => reg_1196,
        din2 => tmp_7_3_i_reg_2309,
        dout => grp_fu_1821_p3);

    dct_mac_muladd_15tde_U16 : component dct_mac_muladd_15tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_10_l_reg_2339,
        din1 => reg_1200,
        din2 => tmp_7_5_i_reg_2344,
        dout => grp_fu_1829_p3);

    dct_mac_muladd_15tde_U17 : component dct_mac_muladd_15tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_8_lo_reg_2349,
        din1 => reg_1196,
        din2 => grp_fu_1843_p3,
        dout => grp_fu_1836_p3);

    dct_mac_muladd_15udo_U18 : component dct_mac_muladd_15udo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_load_reg_2354,
        din1 => reg_1200,
        din2 => grp_fu_1843_p2,
        dout => grp_fu_1843_p3);

    dct_mul_mul_15s_1rcU_U19 : component dct_mul_mul_15s_1rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_1_lo_reg_2600,
        din1 => tmp_7_1_i4_fu_1852_p1,
        dout => tmp_7_1_i4_fu_1852_p2);

    dct_mul_mul_15s_1rcU_U20 : component dct_mul_mul_15s_1rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_3_lo_reg_2610,
        din1 => tmp_7_3_i8_fu_1857_p1,
        dout => tmp_7_3_i8_fu_1857_p2);

    dct_mul_mul_15s_1rcU_U21 : component dct_mul_mul_15s_1rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_5_lo_reg_2620,
        din1 => tmp_7_5_i1_fu_1862_p1,
        dout => tmp_7_5_i1_fu_1862_p2);

    dct_mac_muladd_15tde_U22 : component dct_mac_muladd_15tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_6_lo_reg_2625,
        din1 => grp_fu_1867_p1,
        din2 => grp_fu_1873_p3,
        dout => grp_fu_1867_p3);

    dct_mac_muladd_15udo_U23 : component dct_mac_muladd_15udo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_7_lo_reg_2630,
        din1 => grp_fu_1873_p1,
        din2 => grp_fu_1873_p2,
        dout => grp_fu_1873_p3);

    dct_mac_muladd_14sc4_U24 : component dct_mac_muladd_14sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1881_p0,
        din1 => grp_fu_1881_p1,
        din2 => tmp_7_1_i4_reg_2640,
        dout => grp_fu_1881_p3);

    dct_mac_muladd_15tde_U25 : component dct_mac_muladd_15tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_2_lo_reg_2645,
        din1 => grp_fu_1888_p1,
        din2 => tmp_7_3_i8_reg_2650,
        dout => grp_fu_1888_p3);

    dct_mac_muladd_15tde_U26 : component dct_mac_muladd_15tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => dct_coeff_table_4_lo_reg_2655,
        din1 => grp_fu_1895_p1,
        din2 => tmp_7_5_i1_reg_2660,
        dout => grp_fu_1895_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_1204_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3) and not((exitcond_flatten_reg_2222 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2)))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and not((ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = tmp_i2_fu_1616_p2)))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = tmp_i2_fu_1616_p2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and not((ap_const_lv1_0 = tmp_i2_fu_1616_p2))))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2)))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_9_fu_1463_p2)))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_9_fu_1463_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and not((ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_1088_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                i_1_reg_1088 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))) then 
                i_1_reg_1088 <= i_6_fu_1432_p2;
            end if; 
        end if;
    end process;

    i_2_reg_1099_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                i_2_reg_1099 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state23))) then 
                i_2_reg_1099 <= i_5_reg_2418;
            end if; 
        end if;
    end process;

    i_3_reg_1143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_9_fu_1463_p2)))) then 
                i_3_reg_1143 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))) then 
                i_3_reg_1143 <= i_7_fu_1765_p2;
            end if; 
        end if;
    end process;

    i_reg_1043_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222))) then 
                i_reg_1043 <= i_cast_mid2_v_reg_2262;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                i_reg_1043 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_1121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_9_fu_1463_p2)))) then 
                indvar_flatten1_reg_1121 <= ap_const_lv7_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))) then 
                indvar_flatten1_reg_1121 <= indvar_flatten_next1_fu_1704_p2;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_1066_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                indvar_flatten7_reg_1066 <= ap_const_lv7_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))) then 
                indvar_flatten7_reg_1066 <= indvar_flatten_next8_fu_1371_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_1032_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_1032 <= indvar_flatten_next_reg_2226;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_1032 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_reg_1132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_const_lv1_0 = tmp_9_fu_1463_p2)))) then 
                j_1_reg_1132 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_flatten1_reg_2675))) then 
                j_1_reg_1132 <= j_1_cast9_mid2_v_reg_2689;
            end if; 
        end if;
    end process;

    j_reg_1077_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                j_reg_1077 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten9_reg_2384))) then 
                j_reg_1077 <= j_cast_mid2_v_reg_2398;
            end if; 
        end if;
    end process;

    k_i1_reg_1110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = tmp_i2_fu_1616_p2))) then 
                k_i1_reg_1110 <= k_1_fu_1622_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
                k_i1_reg_1110 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_1055_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                k_i_reg_1055 <= k_reg_2364;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                k_i_reg_1055 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222 <= exitcond_flatten_reg_2222;
                ap_pipeline_reg_pp0_iter1_k_i_mid2_reg_2236 <= k_i_mid2_reg_2236;
                exitcond_flatten_reg_2222 <= exitcond_flatten_fu_1204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1))) then
                ap_pipeline_reg_pp0_iter1_i_cast_mid2_v_reg_2262 <= i_cast_mid2_v_reg_2262;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0))) then
                ap_pipeline_reg_pp2_iter1_tmp_39_reg_2565 <= tmp_39_reg_2565;
                ap_pipeline_reg_pp2_iter1_tmp_i2_reg_2549 <= tmp_i2_reg_2549;
                tmp_i2_reg_2549 <= tmp_i2_fu_1616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp2_iter2_tmp_39_reg_2565 <= ap_pipeline_reg_pp2_iter1_tmp_39_reg_2565;
                ap_pipeline_reg_pp2_iter2_tmp_i2_reg_2549 <= ap_pipeline_reg_pp2_iter1_tmp_i2_reg_2549;
                ap_pipeline_reg_pp2_iter3_tmp_39_reg_2565 <= ap_pipeline_reg_pp2_iter2_tmp_39_reg_2565;
                ap_pipeline_reg_pp2_iter3_tmp_i2_reg_2549 <= ap_pipeline_reg_pp2_iter2_tmp_i2_reg_2549;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                col_inbuf_load_1_reg_2459 <= col_inbuf_q1;
                col_inbuf_load_reg_2454 <= col_inbuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                col_inbuf_load_2_reg_2474 <= col_inbuf_q1;
                col_inbuf_load_3_reg_2479 <= col_inbuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                col_inbuf_load_4_reg_2494 <= col_inbuf_q1;
                col_inbuf_load_5_reg_2499 <= col_inbuf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_tmp_i2_reg_2549)) then
                dct_coeff_table_0_lo_reg_2635 <= dct_coeff_table_0_q0;
                dct_coeff_table_2_lo_reg_2645 <= dct_coeff_table_2_q0;
                dct_coeff_table_4_lo_reg_2655 <= dct_coeff_table_4_q0;
                tmp_7_1_i4_reg_2640 <= tmp_7_1_i4_fu_1852_p2;
                tmp_7_3_i8_reg_2650 <= tmp_7_3_i8_fu_1857_p2;
                tmp_7_5_i1_reg_2660 <= tmp_7_5_i1_fu_1862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                dct_coeff_table_10_l_reg_2339 <= dct_coeff_table_10_q0;
                dct_coeff_table_12_l_reg_2334 <= dct_coeff_table_12_q0;
                dct_coeff_table_8_lo_reg_2349 <= dct_coeff_table_8_q0;
                dct_coeff_table_load_reg_2354 <= dct_coeff_table_q0;
                tmp_7_5_i_reg_2344 <= tmp_7_5_i_fu_1815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_2222 = ap_const_lv1_0))) then
                dct_coeff_table_11_l_reg_2284 <= dct_coeff_table_11_q0;
                dct_coeff_table_13_l_reg_2279 <= dct_coeff_table_13_q0;
                tmp_2_reg_2268 <= tmp_2_fu_1249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then
                dct_coeff_table_14_l_reg_2294 <= dct_coeff_table_14_q0;
                dct_coeff_table_9_lo_reg_2319 <= dct_coeff_table_9_q0;
                tmp_7_1_i_reg_2299 <= tmp_7_1_i_fu_1796_p2;
                tmp_7_3_i_reg_2309 <= tmp_7_3_i_fu_1802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = tmp_i2_reg_2549))) then
                dct_coeff_table_1_lo_reg_2600 <= dct_coeff_table_1_q0;
                dct_coeff_table_3_lo_reg_2610 <= dct_coeff_table_3_q0;
                dct_coeff_table_5_lo_reg_2620 <= dct_coeff_table_5_q0;
                dct_coeff_table_6_lo_reg_2625 <= dct_coeff_table_6_q0;
                dct_coeff_table_7_lo_reg_2630 <= dct_coeff_table_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond_flatten1_reg_2675 <= exitcond_flatten1_fu_1698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten9_reg_2384 <= exitcond_flatten9_fu_1365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))) then
                i_1_mid2_reg_2393 <= i_1_mid2_fu_1389_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))) then
                i_3_mid2_reg_2684 <= i_3_mid2_fu_1722_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                i_5_reg_2418 <= i_5_fu_1469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_2222 = ap_const_lv1_0))) then
                i_cast_mid2_v_reg_2262 <= i_cast_mid2_v_fu_1242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_2226 <= indvar_flatten_next_fu_1210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))) then
                j_1_cast9_mid2_v_reg_2689 <= j_1_cast9_mid2_v_fu_1730_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))) then
                j_cast_mid2_v_reg_2398 <= j_cast_mid2_v_fu_1397_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = tmp_i2_fu_1616_p2))) then
                    k_cast1_i_reg_2558(3 downto 0) <= k_cast1_i_fu_1628_p1(3 downto 0);
                tmp_39_reg_2565 <= tmp_39_fu_1641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_1204_p2))) then
                    k_i_cast_reg_2242(3 downto 0) <= k_i_cast_fu_1230_p1(3 downto 0);
                k_i_mid2_reg_2236 <= k_i_mid2_fu_1222_p3;
                tmp_i3_reg_2231 <= tmp_i3_fu_1216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3))) then
                k_reg_2364 <= k_fu_1283_p2;
                tmp7_reg_2359 <= grp_fu_1808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_2222 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                reg_1196 <= grp_fu_1154_p10;
                reg_1200 <= grp_fu_1175_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter1_tmp_i2_reg_2549) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2))) then
                tmp15_reg_2665 <= grp_fu_1867_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                tmp3_reg_2374 <= grp_fu_1829_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222))) then
                tmp5_reg_2379 <= grp_fu_1836_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                tmp9_reg_2369 <= tmp9_fu_1302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_9_fu_1463_p2))) then
                    tmp_18_reg_2423(6 downto 3) <= tmp_18_fu_1475_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                    tmp_22_cast_reg_2504(6 downto 3) <= tmp_22_cast_fu_1587_p1(6 downto 3);
                tmp_6_1_cast_i_reg_2514 <= tmp_6_1_cast_i_fu_1593_p1;
                tmp_6_2_cast_i_reg_2519 <= tmp_6_2_cast_i_fu_1596_p1;
                tmp_6_3_cast_i_reg_2524 <= tmp_6_3_cast_i_fu_1599_p1;
                tmp_6_4_cast_i_reg_2529 <= tmp_6_4_cast_i_fu_1602_p1;
                tmp_6_5_cast_i_reg_2534 <= tmp_6_5_cast_i_fu_1605_p1;
                tmp_6_6_cast_i_reg_2539 <= tmp_6_6_cast_i_fu_1608_p1;
                tmp_6_7_cast_i_reg_2544 <= tmp_6_7_cast_i_fu_1612_p1;
                tmp_6_cast_i_reg_2509 <= tmp_6_cast_i_fu_1590_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp2_iter2_tmp_i2_reg_2549)) then
                tmp_5_i1_reg_2670 <= tmp_3_i1_fu_1678_p2(28 downto 13);
            end if;
        end if;
    end process;
    k_i_cast_reg_2242(31 downto 4) <= "0000000000000000000000000000";
    tmp_18_reg_2423(2 downto 0) <= "000";
    tmp_22_cast_reg_2504(2 downto 0) <= "000";
    tmp_22_cast_reg_2504(7) <= '0';
    k_cast1_i_reg_2558(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_1204_p2, exitcond_flatten9_fu_1365_p2, ap_enable_reg_pp1_iter0, tmp_9_fu_1463_p2, tmp_i2_fu_1616_p2, ap_enable_reg_pp2_iter0, exitcond_flatten1_fu_1698_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_1204_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
            when ap_ST_fsm_pp0_stage2 => 
                if (not(((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and not((ap_const_lv1_0 = exitcond_flatten9_fu_1365_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (not((ap_const_lv1_0 = tmp_9_fu_1463_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter3)))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = tmp_i2_fu_1616_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and not((ap_const_lv1_0 = tmp_i2_fu_1616_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp3_iter0) and not((ap_const_lv1_0 = exitcond_flatten1_fu_1698_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8 downto 8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state17 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state23 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state26 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state9 <= ap_CS_fsm(5 downto 5);

    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state26)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_enable_reg_pp1_iter1, tmp_20_cast_fu_1458_p1, tmp_19_fu_1483_p1, tmp_25_fu_1522_p3, tmp_29_fu_1550_p3, tmp_33_fu_1578_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            col_inbuf_address0 <= tmp_33_fu_1578_p3(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            col_inbuf_address0 <= tmp_29_fu_1550_p3(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            col_inbuf_address0 <= tmp_25_fu_1522_p3(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            col_inbuf_address0 <= tmp_19_fu_1483_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            col_inbuf_address0 <= tmp_20_cast_fu_1458_p1(6 - 1 downto 0);
        else 
            col_inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_address1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_21_fu_1494_p3, tmp_23_fu_1508_p3, tmp_27_fu_1536_p3, tmp_31_fu_1564_p3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            col_inbuf_address1 <= tmp_31_fu_1564_p3(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state15))) then 
            col_inbuf_address1 <= tmp_27_fu_1536_p3(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state14))) then 
            col_inbuf_address1 <= tmp_23_fu_1508_p3(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            col_inbuf_address1 <= tmp_21_fu_1494_p3(6 - 1 downto 0);
        else 
            col_inbuf_address1 <= "XXXXXX";
        end if; 
    end process;


    col_inbuf_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)) or ((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then 
            col_inbuf_ce0 <= ap_const_logic_1;
        else 
            col_inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state14)) or ((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            col_inbuf_ce1 <= ap_const_logic_1;
        else 
            col_inbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    col_inbuf_we0_assign_proc : process(exitcond_flatten9_reg_2384, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten9_reg_2384)))) then 
            col_inbuf_we0 <= ap_const_logic_1;
        else 
            col_inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_0_address0 <= k_cast1_i_reg_2558(3 - 1 downto 0);

    dct_coeff_table_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            dct_coeff_table_0_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_10_address0 <= k_i_cast_reg_2242(3 - 1 downto 0);

    dct_coeff_table_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_10_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_11_address0 <= k_i_cast_fu_1230_p1(3 - 1 downto 0);

    dct_coeff_table_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_11_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_12_address0 <= k_i_cast_reg_2242(3 - 1 downto 0);

    dct_coeff_table_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_12_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_13_address0 <= k_i_cast_fu_1230_p1(3 - 1 downto 0);

    dct_coeff_table_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then 
            dct_coeff_table_13_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_14_address0 <= k_i_cast_reg_2242(3 - 1 downto 0);

    dct_coeff_table_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_14_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_1_address0 <= k_cast1_i_fu_1628_p1(3 - 1 downto 0);

    dct_coeff_table_1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            dct_coeff_table_1_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_2_address0 <= k_cast1_i_reg_2558(3 - 1 downto 0);

    dct_coeff_table_2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            dct_coeff_table_2_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_3_address0 <= k_cast1_i_fu_1628_p1(3 - 1 downto 0);

    dct_coeff_table_3_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            dct_coeff_table_3_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_4_address0 <= k_cast1_i_reg_2558(3 - 1 downto 0);

    dct_coeff_table_4_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
            dct_coeff_table_4_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_5_address0 <= k_cast1_i_fu_1628_p1(3 - 1 downto 0);

    dct_coeff_table_5_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            dct_coeff_table_5_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_6_address0 <= k_cast1_i_fu_1628_p1(3 - 1 downto 0);

    dct_coeff_table_6_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            dct_coeff_table_6_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_7_address0 <= k_cast1_i_fu_1628_p1(3 - 1 downto 0);

    dct_coeff_table_7_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            dct_coeff_table_7_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_8_address0 <= k_i_cast_reg_2242(3 - 1 downto 0);

    dct_coeff_table_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_8_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_9_address0 <= k_i_cast_reg_2242(3 - 1 downto 0);

    dct_coeff_table_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_9_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_address0 <= k_i_cast_reg_2242(3 - 1 downto 0);

    dct_coeff_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2))) then 
            dct_coeff_table_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_assign_1_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter4, tmp_43_cast_fu_1694_p1, tmp_42_cast_fu_1760_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0))) then 
            dst_assign_1_address0 <= tmp_42_cast_fu_1760_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_enable_reg_pp2_iter4)) then 
            dst_assign_1_address0 <= tmp_43_cast_fu_1694_p1(6 - 1 downto 0);
        else 
            dst_assign_1_address0 <= "XXXXXX";
        end if; 
    end process;


    dst_assign_1_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter4)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0)) or (ap_const_logic_1 = ap_enable_reg_pp2_iter4))) then 
            dst_assign_1_ce0 <= ap_const_logic_1;
        else 
            dst_assign_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_assign_1_we0_assign_proc : process(ap_pipeline_reg_pp2_iter3_tmp_i2_reg_2549, ap_enable_reg_pp2_iter4)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp2_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp2_iter3_tmp_i2_reg_2549)))) then 
            dst_assign_1_we0 <= ap_const_logic_1;
        else 
            dst_assign_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_assign_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_6_cast_fu_1340_p1, tmp_19_cast_fu_1427_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            dst_assign_address0 <= tmp_19_cast_fu_1427_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            dst_assign_address0 <= tmp_6_cast_fu_1340_p1(6 - 1 downto 0);
        else 
            dst_assign_address0 <= "XXXXXX";
        end if; 
    end process;


    dst_assign_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            dst_assign_ce0 <= ap_const_logic_1;
        else 
            dst_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dst_assign_d0 <= tmp_3_i_fu_1349_p2(28 downto 13);

    dst_assign_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222)))) then 
            dst_assign_we0 <= ap_const_logic_1;
        else 
            dst_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten1_fu_1698_p2 <= "1" when (indvar_flatten1_reg_1121 = ap_const_lv7_40) else "0";
    exitcond_flatten9_fu_1365_p2 <= "1" when (indvar_flatten7_reg_1066 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_1204_p2 <= "1" when (indvar_flatten_phi_fu_1036_p4 = ap_const_lv7_40) else "0";

    grp_fu_1154_p9_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_2_fu_1249_p1, tmp_2_reg_2268)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            grp_fu_1154_p9 <= tmp_2_reg_2268;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_1154_p9 <= tmp_2_fu_1249_p1;
        else 
            grp_fu_1154_p9 <= "XXX";
        end if; 
    end process;


    grp_fu_1175_p9_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_2_fu_1249_p1, tmp_2_reg_2268)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            grp_fu_1175_p9 <= tmp_2_reg_2268;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            grp_fu_1175_p9 <= tmp_2_fu_1249_p1;
        else 
            grp_fu_1175_p9 <= "XXX";
        end if; 
    end process;

    grp_fu_1808_p0 <= grp_fu_1808_p00(14 - 1 downto 0);
    grp_fu_1808_p00 <= std_logic_vector(resize(unsigned(dct_coeff_table_14_l_reg_2294),29));
    grp_fu_1843_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_1867_p1 <= tmp_6_6_cast_i_reg_2539(16 - 1 downto 0);
    grp_fu_1873_p1 <= tmp_6_7_cast_i_reg_2544(16 - 1 downto 0);
    grp_fu_1873_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_1881_p0 <= grp_fu_1881_p00(14 - 1 downto 0);
    grp_fu_1881_p00 <= std_logic_vector(resize(unsigned(dct_coeff_table_0_lo_reg_2635),29));
    grp_fu_1881_p1 <= tmp_6_cast_i_reg_2509(16 - 1 downto 0);
    grp_fu_1888_p1 <= tmp_6_2_cast_i_reg_2519(16 - 1 downto 0);
    grp_fu_1895_p1 <= tmp_6_4_cast_i_reg_2529(16 - 1 downto 0);
    i_1_cast_cast_fu_1449_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_reg_2393),8));
    i_1_mid2_fu_1389_p3 <= 
        ap_const_lv4_0 when (tmp_13_fu_1383_p2(0) = '1') else 
        i_1_reg_1088;
    i_3_cast8_cast_fu_1782_p1 <= std_logic_vector(resize(unsigned(i_3_mid2_reg_2684),8));
    i_3_mid2_fu_1722_p3 <= 
        ap_const_lv4_0 when (tmp_34_fu_1716_p2(0) = '1') else 
        i_3_reg_1143;
    i_4_fu_1236_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_phi_fu_1047_p4));
    i_5_fu_1469_p2 <= std_logic_vector(unsigned(i_2_reg_1099) + unsigned(ap_const_lv4_1));
    i_6_fu_1432_p2 <= std_logic_vector(unsigned(i_1_mid2_fu_1389_p3) + unsigned(ap_const_lv4_1));
    i_7_fu_1765_p2 <= std_logic_vector(unsigned(i_3_mid2_fu_1722_p3) + unsigned(ap_const_lv4_1));
    i_cast_mid2_v_fu_1242_p3 <= 
        i_4_fu_1236_p2 when (tmp_i3_reg_2231(0) = '1') else 
        i_phi_fu_1047_p4;

    i_phi_fu_1047_p4_assign_proc : process(i_reg_1043, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222, i_cast_mid2_v_reg_2262)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_2222))) then 
            i_phi_fu_1047_p4 <= i_cast_mid2_v_reg_2262;
        else 
            i_phi_fu_1047_p4 <= i_reg_1043;
        end if; 
    end process;


    in_block_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_0_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_0_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_0_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_0_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_0_address0 <= "XXX";
            end if;
        else 
            in_block_0_address0 <= "XXX";
        end if; 
    end process;


    in_block_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_0_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_0_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_0_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_0_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_0_address1 <= "XXX";
            end if;
        else 
            in_block_0_address1 <= "XXX";
        end if; 
    end process;


    in_block_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_0_ce0 <= ap_const_logic_1;
        else 
            in_block_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_0_ce1 <= ap_const_logic_1;
        else 
            in_block_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_1_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_1_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_1_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_1_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_1_address0 <= "XXX";
            end if;
        else 
            in_block_1_address0 <= "XXX";
        end if; 
    end process;


    in_block_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_1_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_1_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_1_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_1_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_1_address1 <= "XXX";
            end if;
        else 
            in_block_1_address1 <= "XXX";
        end if; 
    end process;


    in_block_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_1_ce0 <= ap_const_logic_1;
        else 
            in_block_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_1_ce1 <= ap_const_logic_1;
        else 
            in_block_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_2_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_2_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_2_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_2_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_2_address0 <= "XXX";
            end if;
        else 
            in_block_2_address0 <= "XXX";
        end if; 
    end process;


    in_block_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_2_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_2_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_2_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_2_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_2_address1 <= "XXX";
            end if;
        else 
            in_block_2_address1 <= "XXX";
        end if; 
    end process;


    in_block_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_2_ce0 <= ap_const_logic_1;
        else 
            in_block_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_2_ce1 <= ap_const_logic_1;
        else 
            in_block_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_3_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_3_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_3_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_3_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_3_address0 <= "XXX";
            end if;
        else 
            in_block_3_address0 <= "XXX";
        end if; 
    end process;


    in_block_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_3_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_3_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_3_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_3_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_3_address1 <= "XXX";
            end if;
        else 
            in_block_3_address1 <= "XXX";
        end if; 
    end process;


    in_block_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_3_ce0 <= ap_const_logic_1;
        else 
            in_block_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_3_ce1 <= ap_const_logic_1;
        else 
            in_block_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_4_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_4_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_4_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_4_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_4_address0 <= "XXX";
            end if;
        else 
            in_block_4_address0 <= "XXX";
        end if; 
    end process;


    in_block_4_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_4_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_4_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_4_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_4_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_4_address1 <= "XXX";
            end if;
        else 
            in_block_4_address1 <= "XXX";
        end if; 
    end process;


    in_block_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_4_ce0 <= ap_const_logic_1;
        else 
            in_block_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_4_ce1 <= ap_const_logic_1;
        else 
            in_block_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_5_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_5_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_5_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_5_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_5_address0 <= "XXX";
            end if;
        else 
            in_block_5_address0 <= "XXX";
        end if; 
    end process;


    in_block_5_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_5_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_5_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_5_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_5_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_5_address1 <= "XXX";
            end if;
        else 
            in_block_5_address1 <= "XXX";
        end if; 
    end process;


    in_block_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_5_ce0 <= ap_const_logic_1;
        else 
            in_block_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_5_ce1 <= ap_const_logic_1;
        else 
            in_block_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_6_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_6_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_6_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_6_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_6_address0 <= "XXX";
            end if;
        else 
            in_block_6_address0 <= "XXX";
        end if; 
    end process;


    in_block_6_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_6_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_6_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_6_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_6_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_6_address1 <= "XXX";
            end if;
        else 
            in_block_6_address1 <= "XXX";
        end if; 
    end process;


    in_block_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_6_ce0 <= ap_const_logic_1;
        else 
            in_block_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_6_ce1 <= ap_const_logic_1;
        else 
            in_block_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_7_address0 <= ap_const_lv32_6(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_7_address0 <= ap_const_lv32_2(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_7_address0 <= ap_const_lv32_0(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_7_address0 <= ap_const_lv32_1(3 - 1 downto 0);
            else 
                in_block_7_address0 <= "XXX";
            end if;
        else 
            in_block_7_address0 <= "XXX";
        end if; 
    end process;


    in_block_7_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) then 
                in_block_7_address1 <= ap_const_lv32_7(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) then 
                in_block_7_address1 <= ap_const_lv32_4(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1)) then 
                in_block_7_address1 <= ap_const_lv32_5(3 - 1 downto 0);
            elsif ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)) then 
                in_block_7_address1 <= ap_const_lv32_3(3 - 1 downto 0);
            else 
                in_block_7_address1 <= "XXX";
            end if;
        else 
            in_block_7_address1 <= "XXX";
        end if; 
    end process;


    in_block_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_7_ce0 <= ap_const_logic_1;
        else 
            in_block_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_block_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_block_7_ce1 <= ap_const_logic_1;
        else 
            in_block_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next1_fu_1704_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_1121) + unsigned(ap_const_lv7_1));
    indvar_flatten_next8_fu_1371_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_1066) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_1210_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_1036_p4) + unsigned(ap_const_lv7_1));

    indvar_flatten_phi_fu_1036_p4_assign_proc : process(indvar_flatten_reg_1032, exitcond_flatten_reg_2222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten_next_reg_2226)
    begin
        if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_1036_p4 <= indvar_flatten_next_reg_2226;
        else 
            indvar_flatten_phi_fu_1036_p4 <= indvar_flatten_reg_1032;
        end if; 
    end process;

    j_1_cast9_mid2_cast_fu_1738_p1 <= std_logic_vector(resize(unsigned(j_1_cast9_mid2_v_fu_1730_p3),8));
    j_1_cast9_mid2_v_fu_1730_p3 <= 
        j_3_fu_1710_p2 when (tmp_34_fu_1716_p2(0) = '1') else 
        j_1_phi_fu_1136_p4;

    j_1_phi_fu_1136_p4_assign_proc : process(j_1_reg_1132, exitcond_flatten1_reg_2675, ap_CS_fsm_pp3_stage0, j_1_cast9_mid2_v_reg_2689, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_flatten1_reg_2675))) then 
            j_1_phi_fu_1136_p4 <= j_1_cast9_mid2_v_reg_2689;
        else 
            j_1_phi_fu_1136_p4 <= j_1_reg_1132;
        end if; 
    end process;

    j_2_fu_1377_p2 <= std_logic_vector(unsigned(j_phi_fu_1081_p4) + unsigned(ap_const_lv4_1));
    j_3_fu_1710_p2 <= std_logic_vector(unsigned(j_1_phi_fu_1136_p4) + unsigned(ap_const_lv4_1));
    j_cast_mid2_cast_fu_1405_p1 <= std_logic_vector(resize(unsigned(j_cast_mid2_v_fu_1397_p3),8));
    j_cast_mid2_v_fu_1397_p3 <= 
        j_2_fu_1377_p2 when (tmp_13_fu_1383_p2(0) = '1') else 
        j_phi_fu_1081_p4;

    j_phi_fu_1081_p4_assign_proc : process(j_reg_1077, exitcond_flatten9_reg_2384, ap_CS_fsm_pp1_stage0, j_cast_mid2_v_reg_2398, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten9_reg_2384))) then 
            j_phi_fu_1081_p4 <= j_cast_mid2_v_reg_2398;
        else 
            j_phi_fu_1081_p4 <= j_reg_1077;
        end if; 
    end process;

    k_1_fu_1622_p2 <= std_logic_vector(unsigned(k_i1_reg_1110) + unsigned(ap_const_lv4_1));
    k_cast1_i_cast_fu_1637_p1 <= std_logic_vector(resize(unsigned(k_i1_reg_1110),8));
    k_cast1_i_fu_1628_p1 <= std_logic_vector(resize(unsigned(k_i1_reg_1110),32));
    k_fu_1283_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(k_i_mid2_reg_2236));
    k_i_cast_cast_fu_1331_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_k_i_mid2_reg_2236),8));
    k_i_cast_fu_1230_p1 <= std_logic_vector(resize(unsigned(k_i_mid2_fu_1222_p3),32));
    k_i_mid2_fu_1222_p3 <= 
        ap_const_lv4_0 when (tmp_i3_fu_1216_p2(0) = '1') else 
        k_i_phi_fu_1059_p4;

    k_i_phi_fu_1059_p4_assign_proc : process(k_i_reg_1055, exitcond_flatten_reg_2222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, k_reg_2364)
    begin
        if (((exitcond_flatten_reg_2222 = ap_const_lv1_0) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            k_i_phi_fu_1059_p4 <= k_reg_2364;
        else 
            k_i_phi_fu_1059_p4 <= k_i_reg_1055;
        end if; 
    end process;

    out_block_address0 <= tmp_39_cast_fu_1791_p1(6 - 1 downto 0);

    out_block_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1))) then 
            out_block_ce0 <= ap_const_logic_1;
        else 
            out_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_block_d0 <= dst_assign_1_q0;

    out_block_we0_assign_proc : process(exitcond_flatten1_reg_2675, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_lv1_0 = exitcond_flatten1_reg_2675)))) then 
            out_block_we0 <= ap_const_logic_1;
        else 
            out_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp12_fu_1670_p2 <= std_logic_vector(signed(grp_fu_1881_p3) + signed(grp_fu_1888_p3));
    tmp16_fu_1674_p2 <= std_logic_vector(signed(grp_fu_1895_p3) + signed(tmp15_reg_2665));
    tmp6_fu_1345_p2 <= std_logic_vector(signed(tmp3_reg_2374) + signed(tmp5_reg_2379));
    tmp9_fu_1302_p2 <= std_logic_vector(signed(tmp7_reg_2359) + signed(grp_fu_1821_p3));
    tmp_13_fu_1383_p2 <= "1" when (i_1_reg_1088 = ap_const_lv4_8) else "0";
    tmp_14_fu_1438_p3 <= (j_cast_mid2_v_reg_2398 & ap_const_lv3_0);
    tmp_15_fu_1409_p3 <= (i_1_mid2_fu_1389_p3 & ap_const_lv3_0);
    tmp_16_cast_fu_1445_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_1438_p3),8));
    tmp_16_fu_1421_p2 <= std_logic_vector(unsigned(j_cast_mid2_cast_fu_1405_p1) + unsigned(tmp_18_cast_fu_1417_p1));
    tmp_17_fu_1452_p2 <= std_logic_vector(unsigned(i_1_cast_cast_fu_1449_p1) + unsigned(tmp_16_cast_fu_1445_p1));
    tmp_18_cast_fu_1417_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_1409_p3),8));
    tmp_18_fu_1475_p3 <= (i_2_reg_1099 & ap_const_lv3_0);
    tmp_19_cast_fu_1427_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_1421_p2),32));
    tmp_19_fu_1483_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_1475_p3),32));
    tmp_20_cast_fu_1458_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_1452_p2),32));
    tmp_20_fu_1488_p2 <= (tmp_18_fu_1475_p3 or ap_const_lv7_1);
    tmp_21_fu_1494_p3 <= (ap_const_lv25_0 & tmp_20_fu_1488_p2);
    tmp_22_cast_fu_1587_p1 <= std_logic_vector(resize(unsigned(tmp_18_reg_2423),8));
    tmp_22_fu_1503_p2 <= (tmp_18_reg_2423 or ap_const_lv7_2);
    tmp_23_fu_1508_p3 <= (ap_const_lv25_0 & tmp_22_fu_1503_p2);
    tmp_24_fu_1517_p2 <= (tmp_18_reg_2423 or ap_const_lv7_3);
    tmp_25_fu_1522_p3 <= (ap_const_lv25_0 & tmp_24_fu_1517_p2);
    tmp_26_fu_1531_p2 <= (tmp_18_reg_2423 or ap_const_lv7_4);
    tmp_27_fu_1536_p3 <= (ap_const_lv25_0 & tmp_26_fu_1531_p2);
    tmp_28_fu_1545_p2 <= (tmp_18_reg_2423 or ap_const_lv7_5);
    tmp_29_fu_1550_p3 <= (ap_const_lv25_0 & tmp_28_fu_1545_p2);
    tmp_2_fu_1249_p1 <= i_cast_mid2_v_fu_1242_p3(3 - 1 downto 0);
    tmp_30_fu_1559_p2 <= (tmp_18_reg_2423 or ap_const_lv7_6);
    tmp_31_fu_1564_p3 <= (ap_const_lv25_0 & tmp_30_fu_1559_p2);
    tmp_32_fu_1573_p2 <= (tmp_18_reg_2423 or ap_const_lv7_7);
    tmp_33_fu_1578_p3 <= (ap_const_lv25_0 & tmp_32_fu_1573_p2);
    tmp_34_fu_1716_p2 <= "1" when (i_3_reg_1143 = ap_const_lv4_8) else "0";
    tmp_35_fu_1771_p3 <= (j_1_cast9_mid2_v_reg_2689 & ap_const_lv3_0);
    tmp_36_fu_1785_p2 <= std_logic_vector(unsigned(i_3_cast8_cast_fu_1782_p1) + unsigned(tmp_38_cast_fu_1778_p1));
    tmp_37_fu_1742_p3 <= (i_3_mid2_fu_1722_p3 & ap_const_lv3_0);
    tmp_38_cast_fu_1778_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_1771_p3),8));
    tmp_38_fu_1754_p2 <= std_logic_vector(unsigned(j_1_cast9_mid2_cast_fu_1738_p1) + unsigned(tmp_41_cast_fu_1750_p1));
    tmp_39_cast_fu_1791_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_1785_p2),32));
    tmp_39_fu_1641_p2 <= std_logic_vector(unsigned(tmp_22_cast_reg_2504) + unsigned(k_cast1_i_cast_fu_1637_p1));
    tmp_3_i1_fu_1678_p2 <= std_logic_vector(unsigned(tmp12_fu_1670_p2) + unsigned(tmp16_fu_1674_p2));
    tmp_3_i_fu_1349_p2 <= std_logic_vector(unsigned(tmp9_reg_2369) + unsigned(tmp6_fu_1345_p2));
    tmp_41_cast_fu_1750_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_1742_p3),8));
    tmp_42_cast_fu_1760_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_1754_p2),32));
    tmp_43_cast_fu_1694_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp2_iter3_tmp_39_reg_2565),32));
    tmp_5_cast_fu_1327_p1 <= std_logic_vector(resize(unsigned(tmp_fu_1320_p3),8));
        tmp_6_1_cast_i_fu_1593_p1 <= std_logic_vector(resize(signed(col_inbuf_load_1_reg_2459),29));

        tmp_6_2_cast_i_fu_1596_p1 <= std_logic_vector(resize(signed(col_inbuf_load_2_reg_2474),29));

        tmp_6_3_cast_i_fu_1599_p1 <= std_logic_vector(resize(signed(col_inbuf_load_3_reg_2479),29));

        tmp_6_4_cast_i_fu_1602_p1 <= std_logic_vector(resize(signed(col_inbuf_load_4_reg_2494),29));

        tmp_6_5_cast_i_fu_1605_p1 <= std_logic_vector(resize(signed(col_inbuf_load_5_reg_2499),29));

        tmp_6_6_cast_i_fu_1608_p1 <= std_logic_vector(resize(signed(col_inbuf_q1),29));

        tmp_6_7_cast_i_fu_1612_p1 <= std_logic_vector(resize(signed(col_inbuf_q0),29));

    tmp_6_cast_fu_1340_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_1334_p2),32));
        tmp_6_cast_i_fu_1590_p1 <= std_logic_vector(resize(signed(col_inbuf_load_reg_2454),29));

    tmp_6_fu_1334_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_1327_p1) + unsigned(k_i_cast_cast_fu_1331_p1));
    tmp_7_1_i4_fu_1852_p1 <= tmp_6_1_cast_i_reg_2514(16 - 1 downto 0);
    tmp_7_3_i8_fu_1857_p1 <= tmp_6_3_cast_i_reg_2524(16 - 1 downto 0);
    tmp_7_5_i1_fu_1862_p1 <= tmp_6_5_cast_i_reg_2534(16 - 1 downto 0);
    tmp_9_fu_1463_p2 <= "1" when (i_2_reg_1099 = ap_const_lv4_8) else "0";
    tmp_fu_1320_p3 <= (ap_pipeline_reg_pp0_iter1_i_cast_mid2_v_reg_2262 & ap_const_lv3_0);
    tmp_i2_fu_1616_p2 <= "1" when (k_i1_reg_1110 = ap_const_lv4_8) else "0";
    tmp_i3_fu_1216_p2 <= "1" when (k_i_phi_fu_1059_p4 = ap_const_lv4_8) else "0";
end behav;
