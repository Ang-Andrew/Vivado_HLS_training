// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state4 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] buf_r_address0;
output   buf_r_ce0;
input  [15:0] buf_r_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg output_r_ce0;
reg output_r_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_71;
reg   [3:0] r_reg_82;
reg   [3:0] c_reg_93;
wire   [0:0] exitcond_flatten_fu_104_p2;
reg   [0:0] exitcond_flatten_reg_203;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [6:0] indvar_flatten_next_fu_110_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] r_cast8_mid2_v_fu_136_p3;
reg   [3:0] r_cast8_mid2_v_reg_212;
wire   [5:0] sum3_fu_187_p2;
reg   [5:0] sum3_reg_222;
wire   [3:0] c_1_fu_193_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] r_phi_fu_86_p4;
wire   [31:0] tmp_4_cast_fu_182_p1;
wire   [31:0] sum3_cast_fu_199_p1;
wire   [0:0] exitcond2_fu_122_p2;
wire   [3:0] r_1_fu_116_p2;
wire   [6:0] tmp_fu_144_p3;
wire   [2:0] tmp_1_fu_156_p1;
wire   [3:0] c_mid2_fu_128_p3;
wire   [7:0] tmp_1_cast_fu_152_p1;
wire   [7:0] c_cast5_cast_fu_172_p1;
wire   [7:0] tmp_4_fu_176_p2;
wire   [5:0] c_cast6_fu_168_p1;
wire   [5:0] tmp_mid2_fu_160_p3;
wire   [0:0] ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_104_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_104_p2 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        c_reg_93 <= c_1_fu_193_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        c_reg_93 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        indvar_flatten_reg_71 <= indvar_flatten_next_fu_110_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_71 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_203 == 1'b0))) begin
        r_reg_82 <= r_cast8_mid2_v_reg_212;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        r_reg_82 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        exitcond_flatten_reg_203 <= exitcond_flatten_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        r_cast8_mid2_v_reg_212 <= r_cast8_mid2_v_fu_136_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_104_p2 == 1'b0))) begin
        sum3_reg_222 <= sum3_fu_187_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_203 == 1'b0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_203 == 1'b0))) begin
        r_phi_fu_86_p4 = r_cast8_mid2_v_reg_212;
    end else begin
        r_phi_fu_86_p4 = r_reg_82;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_104_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_2];

assign buf_r_address0 = tmp_4_cast_fu_182_p1;

assign c_1_fu_193_p2 = (ap_const_lv4_1 + c_mid2_fu_128_p3);

assign c_cast5_cast_fu_172_p1 = c_mid2_fu_128_p3;

assign c_cast6_fu_168_p1 = c_mid2_fu_128_p3;

assign c_mid2_fu_128_p3 = ((exitcond2_fu_122_p2[0:0] === 1'b1) ? ap_const_lv4_0 : c_reg_93);

assign exitcond2_fu_122_p2 = ((c_reg_93 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_104_p2 = ((indvar_flatten_reg_71 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_110_p2 = (indvar_flatten_reg_71 + ap_const_lv7_1);

assign output_r_address0 = sum3_cast_fu_199_p1;

assign output_r_d0 = buf_r_q0;

assign r_1_fu_116_p2 = (ap_const_lv4_1 + r_phi_fu_86_p4);

assign r_cast8_mid2_v_fu_136_p3 = ((exitcond2_fu_122_p2[0:0] === 1'b1) ? r_1_fu_116_p2 : r_phi_fu_86_p4);

assign sum3_cast_fu_199_p1 = sum3_reg_222;

assign sum3_fu_187_p2 = (c_cast6_fu_168_p1 + tmp_mid2_fu_160_p3);

assign tmp_1_cast_fu_152_p1 = tmp_fu_144_p3;

assign tmp_1_fu_156_p1 = r_cast8_mid2_v_fu_136_p3[2:0];

assign tmp_4_cast_fu_182_p1 = tmp_4_fu_176_p2;

assign tmp_4_fu_176_p2 = (tmp_1_cast_fu_152_p1 + c_cast5_cast_fu_172_p1);

assign tmp_fu_144_p3 = {{r_cast8_mid2_v_fu_136_p3}, {ap_const_lv3_0}};

assign tmp_mid2_fu_160_p3 = {{tmp_1_fu_156_p1}, {ap_const_lv3_0}};

endmodule //write_data
