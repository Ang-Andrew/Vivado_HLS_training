// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Xpose_Row_Outer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        row_outbuf_i_address0,
        row_outbuf_i_ce0,
        row_outbuf_i_q0,
        col_inbuf_address0,
        col_inbuf_ce0,
        col_inbuf_we0,
        col_inbuf_d0,
        col_inbuf_q0
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_pp0_stage0 = 4'b10;
parameter    ap_ST_fsm_pp0_stage1 = 4'b100;
parameter    ap_ST_fsm_state5 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv7_F = 7'b1111;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv128_lc_1 = 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] row_outbuf_i_address0;
output   row_outbuf_i_ce0;
input  [15:0] row_outbuf_i_q0;
output  [2:0] col_inbuf_address0;
output   col_inbuf_ce0;
output   col_inbuf_we0;
output  [127:0] col_inbuf_d0;
input  [127:0] col_inbuf_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg row_outbuf_i_ce0;
reg col_inbuf_ce0;
reg col_inbuf_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_79;
reg   [3:0] j_0_i_reg_90;
reg   [3:0] i_1_i_reg_101;
wire   [0:0] exitcond_flatten_fu_112_p2;
reg   [0:0] exitcond_flatten_reg_332;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [6:0] indvar_flatten_next_fu_118_p2;
reg   [6:0] indvar_flatten_next_reg_336;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] j_0_i_cast8_mid2_v_fu_144_p3;
reg   [3:0] j_0_i_cast8_mid2_v_reg_341;
reg   [2:0] col_inbuf_addr_reg_351;
wire   [2:0] tmp_27_fu_184_p1;
reg   [2:0] tmp_27_reg_356;
wire   [3:0] i_fu_188_p2;
reg   [3:0] i_reg_361;
wire   [6:0] tmp_4_fu_201_p2;
reg   [6:0] tmp_4_reg_366;
wire   [0:0] ap_CS_fsm_pp0_stage1;
wire   [0:0] tmp_28_fu_207_p2;
reg   [0:0] tmp_28_reg_371;
wire   [7:0] tmp_29_fu_213_p1;
reg   [7:0] tmp_29_reg_378;
wire   [127:0] tmp_40_fu_239_p2;
reg   [127:0] tmp_40_reg_384;
reg    ap_enable_reg_pp0_iter1;
reg   [6:0] indvar_flatten_phi_fu_83_p4;
reg   [3:0] j_0_i_phi_fu_94_p4;
reg   [3:0] i_1_i_phi_fu_105_p4;
wire   [31:0] tmp_8_cast_fu_179_p1;
wire   [31:0] j_0_i_cast8_mid2_fu_152_p1;
wire   [0:0] tmp_s_fu_130_p2;
wire   [3:0] j_fu_124_p2;
wire   [3:0] i_1_i_mid2_fu_136_p3;
wire   [6:0] tmp_fu_161_p3;
wire   [7:0] tmp_7_cast_fu_169_p1;
wire   [7:0] j_0_i_cast8_mid2_cas_fu_157_p1;
wire   [7:0] tmp_8_fu_173_p2;
wire   [6:0] tmp_3_fu_194_p3;
wire   [7:0] tmp_32_fu_221_p2;
wire   [7:0] tmp_35_fu_227_p3;
wire   [127:0] tmp_31_fu_217_p1;
wire   [127:0] tmp_37_fu_235_p1;
wire   [7:0] tmp_30_fu_245_p1;
wire   [7:0] tmp_33_fu_248_p3;
wire   [7:0] tmp_34_fu_254_p3;
wire   [7:0] tmp_36_fu_260_p2;
reg   [127:0] tmp_41_fu_274_p4;
wire   [127:0] tmp_38_fu_266_p1;
wire   [127:0] tmp_39_fu_270_p1;
wire   [127:0] tmp_43_fu_289_p2;
wire   [127:0] tmp_44_fu_295_p2;
wire   [127:0] p_demorgan_fu_301_p2;
wire   [127:0] tmp_45_fu_307_p2;
wire   [127:0] tmp_42_fu_283_p3;
wire   [127:0] tmp_46_fu_313_p2;
wire   [127:0] tmp_47_fu_319_p2;
wire   [0:0] ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(exitcond_flatten_fu_112_p2 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_332 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((1'b1 == ap_CS_fsm_pp0_stage1) & ~(exitcond_flatten_reg_332 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_1_i_reg_101 <= i_reg_361;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        i_1_i_reg_101 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_79 <= indvar_flatten_next_reg_336;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_79 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_0_i_reg_90 <= j_0_i_cast8_mid2_v_reg_341;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        j_0_i_reg_90 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_112_p2 == 1'b0))) begin
        col_inbuf_addr_reg_351 <= j_0_i_cast8_mid2_fu_152_p1;
        tmp_27_reg_356 <= tmp_27_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        exitcond_flatten_reg_332 <= exitcond_flatten_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_112_p2 == 1'b0))) begin
        i_reg_361 <= i_fu_188_p2;
        j_0_i_cast8_mid2_v_reg_341 <= j_0_i_cast8_mid2_v_fu_144_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_336 <= indvar_flatten_next_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_332 == 1'b0))) begin
        tmp_28_reg_371 <= tmp_28_fu_207_p2;
        tmp_29_reg_378[6 : 4] <= tmp_29_fu_213_p1[6 : 4];
        tmp_40_reg_384 <= tmp_40_fu_239_p2;
        tmp_4_reg_366[6 : 4] <= tmp_4_fu_201_p2[6 : 4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        col_inbuf_ce0 = 1'b1;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        col_inbuf_we0 = 1'b1;
    end else begin
        col_inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_1_i_phi_fu_105_p4 = i_reg_361;
    end else begin
        i_1_i_phi_fu_105_p4 = i_1_i_reg_101;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_83_p4 = indvar_flatten_next_reg_336;
    end else begin
        indvar_flatten_phi_fu_83_p4 = indvar_flatten_reg_79;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_332 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_0_i_phi_fu_94_p4 = j_0_i_cast8_mid2_v_reg_341;
    end else begin
        j_0_i_phi_fu_94_p4 = j_0_i_reg_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        row_outbuf_i_ce0 = 1'b1;
    end else begin
        row_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(exitcond_flatten_fu_112_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_3];

assign col_inbuf_address0 = col_inbuf_addr_reg_351;

assign col_inbuf_d0 = (tmp_46_fu_313_p2 | tmp_47_fu_319_p2);

assign exitcond_flatten_fu_112_p2 = ((indvar_flatten_phi_fu_83_p4 == ap_const_lv7_40) ? 1'b1 : 1'b0);

assign i_1_i_mid2_fu_136_p3 = ((tmp_s_fu_130_p2[0:0] === 1'b1) ? ap_const_lv4_0 : i_1_i_phi_fu_105_p4);

assign i_fu_188_p2 = (ap_const_lv4_1 + i_1_i_mid2_fu_136_p3);

assign indvar_flatten_next_fu_118_p2 = (indvar_flatten_phi_fu_83_p4 + ap_const_lv7_1);

assign j_0_i_cast8_mid2_cas_fu_157_p1 = j_0_i_cast8_mid2_v_fu_144_p3;

assign j_0_i_cast8_mid2_fu_152_p1 = j_0_i_cast8_mid2_v_fu_144_p3;

assign j_0_i_cast8_mid2_v_fu_144_p3 = ((tmp_s_fu_130_p2[0:0] === 1'b1) ? j_fu_124_p2 : j_0_i_phi_fu_94_p4);

assign j_fu_124_p2 = (ap_const_lv4_1 + j_0_i_phi_fu_94_p4);

assign p_demorgan_fu_301_p2 = (tmp_43_fu_289_p2 & tmp_44_fu_295_p2);

assign row_outbuf_i_address0 = tmp_8_cast_fu_179_p1;

assign tmp_27_fu_184_p1 = i_1_i_mid2_fu_136_p3[2:0];

assign tmp_28_fu_207_p2 = ((tmp_3_fu_194_p3 > tmp_4_fu_201_p2) ? 1'b1 : 1'b0);

assign tmp_29_fu_213_p1 = tmp_3_fu_194_p3;

assign tmp_30_fu_245_p1 = tmp_4_reg_366;

assign tmp_31_fu_217_p1 = row_outbuf_i_q0;

assign tmp_32_fu_221_p2 = (tmp_29_fu_213_p1 ^ ap_const_lv8_7F);

assign tmp_33_fu_248_p3 = ((tmp_28_reg_371[0:0] === 1'b1) ? tmp_29_reg_378 : tmp_30_fu_245_p1);

assign tmp_34_fu_254_p3 = ((tmp_28_reg_371[0:0] === 1'b1) ? tmp_30_fu_245_p1 : tmp_29_reg_378);

assign tmp_35_fu_227_p3 = ((tmp_28_fu_207_p2[0:0] === 1'b1) ? tmp_32_fu_221_p2 : tmp_29_fu_213_p1);

assign tmp_36_fu_260_p2 = (tmp_33_fu_248_p3 ^ ap_const_lv8_7F);

assign tmp_37_fu_235_p1 = tmp_35_fu_227_p3;

assign tmp_38_fu_266_p1 = tmp_34_fu_254_p3;

assign tmp_39_fu_270_p1 = tmp_36_fu_260_p2;

assign tmp_3_fu_194_p3 = {{tmp_27_reg_356}, {ap_const_lv4_0}};

assign tmp_40_fu_239_p2 = tmp_31_fu_217_p1 << tmp_37_fu_235_p1;

integer ap_tvar_int_0;

always @ (tmp_40_reg_384) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7F - ap_const_lv32_0) begin
            tmp_41_fu_274_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_41_fu_274_p4[ap_tvar_int_0] = tmp_40_reg_384[ap_const_lv32_7F - ap_tvar_int_0];
        end
    end
end

assign tmp_42_fu_283_p3 = ((tmp_28_reg_371[0:0] === 1'b1) ? tmp_41_fu_274_p4 : tmp_40_reg_384);

assign tmp_43_fu_289_p2 = ap_const_lv128_lc_1 << tmp_38_fu_266_p1;

assign tmp_44_fu_295_p2 = ap_const_lv128_lc_1 >> tmp_39_fu_270_p1;

assign tmp_45_fu_307_p2 = (p_demorgan_fu_301_p2 ^ ap_const_lv128_lc_1);

assign tmp_46_fu_313_p2 = (col_inbuf_q0 & tmp_45_fu_307_p2);

assign tmp_47_fu_319_p2 = (tmp_42_fu_283_p3 & p_demorgan_fu_301_p2);

assign tmp_4_fu_201_p2 = (tmp_3_fu_194_p3 | ap_const_lv7_F);

assign tmp_7_cast_fu_169_p1 = tmp_fu_161_p3;

assign tmp_8_cast_fu_179_p1 = tmp_8_fu_173_p2;

assign tmp_8_fu_173_p2 = (tmp_7_cast_fu_169_p1 + j_0_i_cast8_mid2_cas_fu_157_p1);

assign tmp_fu_161_p3 = {{i_1_i_mid2_fu_136_p3}, {ap_const_lv3_0}};

assign tmp_s_fu_130_p2 = ((i_1_i_phi_fu_105_p4 == ap_const_lv4_8) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_4_reg_366[3:0] <= 4'b1111;
    tmp_29_reg_378[3:0] <= 4'b0000;
    tmp_29_reg_378[7] <= 1'b0;
end

endmodule //Loop_Xpose_Row_Outer
