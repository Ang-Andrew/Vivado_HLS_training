-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Row_DCT_Loop_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_2d_in_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    buf_2d_in_ce0 : OUT STD_LOGIC;
    buf_2d_in_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    row_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    row_outbuf_i_ce0 : OUT STD_LOGIC;
    row_outbuf_i_we0 : OUT STD_LOGIC;
    row_outbuf_i_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_Row_DCT_Loop_pr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv9_2F : STD_LOGIC_VECTOR (8 downto 0) := "000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_30 : STD_LOGIC_VECTOR (8 downto 0) := "000110000";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv9_4F : STD_LOGIC_VECTOR (8 downto 0) := "001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv9_5F : STD_LOGIC_VECTOR (8 downto 0) := "001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv9_60 : STD_LOGIC_VECTOR (8 downto 0) := "001100000";
    constant ap_const_lv9_6F : STD_LOGIC_VECTOR (8 downto 0) := "001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv9_70 : STD_LOGIC_VECTOR (8 downto 0) := "001110000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dct_coeff_table_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dct_coeff_table_ce0 : STD_LOGIC;
    signal dct_coeff_table_q0 : STD_LOGIC_VECTOR (126 downto 0);
    signal k_i_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_173_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_508 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_cast_fu_192_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_reg_513 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2d_in_addr_reg_518 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter1_tmp_i_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_i_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_i_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_4_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter1_tmp_4_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_4_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_pipeline_reg_pp0_iter3_tmp_4_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_222_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_reg_547 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_i_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_6_i_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_i_reg_557 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_7_i_reg_557 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_reg_562 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_i_reg_567 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_i_reg_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_11_i_reg_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_i_reg_577 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_12_i_reg_577 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_i_reg_582 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_i_reg_587 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_i_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_15_i_reg_592 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_i_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_pipeline_reg_pp0_iter2_tmp_16_i_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_reg_602 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_i_reg_607 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_612 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_i_reg_617 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_fu_446_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_i_reg_622 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_2_i_fu_452_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_2_i_reg_627 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_4_i_fu_458_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_4_i_reg_632 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_464_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6_reg_637 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_1_i_reg_642 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal i_0_i_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_2_i1_cast_i_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast1_i_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_184_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_cast1_i_cast_fu_213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_488_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_480_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_496_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_422_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp4_fu_422_p2 : signal is "no";
    signal tmp1_fu_418_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of tmp1_fu_418_p2 : signal is "no";
    signal tmp_9_i_fu_426_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_471_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_471_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component dct_mul_mul_16s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Loop_Row_DCT_Loopbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (126 downto 0) );
    end component;



begin
    dct_coeff_table_U : component Loop_Row_DCT_Loopbkb
    generic map (
        DataWidth => 127,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dct_coeff_table_address0,
        ce0 => dct_coeff_table_ce0,
        q0 => dct_coeff_table_q0);

    dct_mul_mul_16s_1cud_U2 : component dct_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_49_reg_542,
        din1 => tmp_50_reg_547,
        dout => tmp_3_i_fu_446_p2);

    dct_mul_mul_16s_1cud_U3 : component dct_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_8_i_reg_562,
        din1 => tmp_10_i_reg_567,
        dout => tmp_3_2_i_fu_452_p2);

    dct_mul_mul_16s_1cud_U4 : component dct_mul_mul_16s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_13_i_reg_582,
        din1 => tmp_14_i_reg_587,
        dout => tmp_3_4_i_fu_458_p2);

    dct_mac_muladd_16dEe_U5 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_17_i_reg_602,
        din1 => tmp_18_i_reg_607,
        din2 => grp_fu_471_p3,
        dout => grp_fu_464_p3);

    dct_mac_muladd_16eOg_U6 : component dct_mac_muladd_16eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_20_i_reg_617,
        din1 => tmp_1_reg_612,
        din2 => grp_fu_471_p2,
        dout => grp_fu_471_p3);

    dct_mac_muladd_16dEe_U7 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => ap_pipeline_reg_pp0_iter2_tmp_6_i_reg_552,
        din1 => ap_pipeline_reg_pp0_iter2_tmp_7_i_reg_557,
        din2 => tmp_3_i_reg_622,
        dout => grp_fu_480_p3);

    dct_mac_muladd_16dEe_U8 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => ap_pipeline_reg_pp0_iter2_tmp_11_i_reg_572,
        din1 => ap_pipeline_reg_pp0_iter2_tmp_12_i_reg_577,
        din2 => tmp_3_2_i_reg_627,
        dout => grp_fu_488_p3);

    dct_mac_muladd_16dEe_U9 : component dct_mac_muladd_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => ap_pipeline_reg_pp0_iter2_tmp_15_i_reg_592,
        din1 => ap_pipeline_reg_pp0_iter2_tmp_16_i_reg_597,
        din2 => tmp_3_4_i_reg_632,
        dout => grp_fu_496_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_167_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_i_fu_196_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_167_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_i_fu_196_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_167_p2 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = tmp_i_fu_196_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    i_0_i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                i_0_i_reg_145 <= i_reg_508;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                i_0_i_reg_145 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_i_fu_196_p2))) then 
                k_i_reg_156 <= k_fu_202_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_167_p2 = ap_const_lv1_0))) then 
                k_i_reg_156 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_tmp_4_reg_532 <= tmp_4_reg_532;
                ap_pipeline_reg_pp0_iter1_tmp_i_reg_523 <= tmp_i_reg_523;
                tmp_i_reg_523 <= tmp_i_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_tmp_11_i_reg_572 <= tmp_11_i_reg_572;
                ap_pipeline_reg_pp0_iter2_tmp_12_i_reg_577 <= tmp_12_i_reg_577;
                ap_pipeline_reg_pp0_iter2_tmp_15_i_reg_592 <= tmp_15_i_reg_592;
                ap_pipeline_reg_pp0_iter2_tmp_16_i_reg_597 <= tmp_16_i_reg_597;
                ap_pipeline_reg_pp0_iter2_tmp_4_reg_532 <= ap_pipeline_reg_pp0_iter1_tmp_4_reg_532;
                ap_pipeline_reg_pp0_iter2_tmp_6_i_reg_552 <= tmp_6_i_reg_552;
                ap_pipeline_reg_pp0_iter2_tmp_7_i_reg_557 <= tmp_7_i_reg_557;
                ap_pipeline_reg_pp0_iter2_tmp_i_reg_523 <= ap_pipeline_reg_pp0_iter1_tmp_i_reg_523;
                ap_pipeline_reg_pp0_iter3_tmp_4_reg_532 <= ap_pipeline_reg_pp0_iter2_tmp_4_reg_532;
                ap_pipeline_reg_pp0_iter3_tmp_i_reg_523 <= ap_pipeline_reg_pp0_iter2_tmp_i_reg_523;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_167_p2 = ap_const_lv1_0))) then
                buf_2d_in_addr_reg_518 <= i_2_i1_cast_i_fu_179_p1(3 - 1 downto 0);
                    tmp_16_cast_reg_513(6 downto 3) <= tmp_16_cast_fu_192_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_reg_508 <= i_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_i_reg_523) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                tmp6_reg_637 <= grp_fu_464_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_i_reg_523))) then
                tmp_10_i_reg_567 <= buf_2d_in_q0(47 downto 32);
                tmp_11_i_reg_572 <= dct_coeff_table_q0(63 downto 48);
                tmp_12_i_reg_577 <= buf_2d_in_q0(63 downto 48);
                tmp_13_i_reg_582 <= dct_coeff_table_q0(79 downto 64);
                tmp_14_i_reg_587 <= buf_2d_in_q0(79 downto 64);
                tmp_15_i_reg_592 <= dct_coeff_table_q0(95 downto 80);
                tmp_16_i_reg_597 <= buf_2d_in_q0(95 downto 80);
                tmp_17_i_reg_602 <= dct_coeff_table_q0(111 downto 96);
                tmp_18_i_reg_607 <= buf_2d_in_q0(111 downto 96);
                tmp_1_reg_612 <= dct_coeff_table_q0(126 downto 112);
                tmp_20_i_reg_617 <= buf_2d_in_q0(127 downto 112);
                tmp_49_reg_542 <= tmp_49_fu_222_p1;
                tmp_50_reg_547 <= tmp_50_fu_226_p1;
                tmp_6_i_reg_552 <= dct_coeff_table_q0(31 downto 16);
                tmp_7_i_reg_557 <= buf_2d_in_q0(31 downto 16);
                tmp_8_i_reg_562 <= dct_coeff_table_q0(47 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_tmp_i_reg_523)) then
                tmp_1_i_reg_642 <= tmp_9_i_fu_426_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_tmp_i_reg_523)) then
                tmp_3_2_i_reg_627 <= tmp_3_2_i_fu_452_p2;
                tmp_3_4_i_reg_632 <= tmp_3_4_i_fu_458_p2;
                tmp_3_i_reg_622 <= tmp_3_i_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = tmp_i_fu_196_p2))) then
                tmp_4_reg_532 <= tmp_4_fu_217_p2;
            end if;
        end if;
    end process;
    tmp_16_cast_reg_513(2 downto 0) <= "000";
    tmp_16_cast_reg_513(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, tmp_fu_167_p2, tmp_i_fu_196_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((tmp_fu_167_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = tmp_i_fu_196_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = tmp_i_fu_196_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_done_reg, tmp_fu_167_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_167_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_fu_167_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_167_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_address0 <= buf_2d_in_addr_reg_518;

    buf_2d_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            buf_2d_in_ce0 <= ap_const_logic_1;
        else 
            buf_2d_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dct_coeff_table_address0 <= k_cast1_i_fu_208_p1(3 - 1 downto 0);

    dct_coeff_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            dct_coeff_table_ce0 <= ap_const_logic_1;
        else 
            dct_coeff_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_471_p2 <= ap_const_lv29_1000(14 - 1 downto 0);
    i_2_i1_cast_i_fu_179_p1 <= std_logic_vector(resize(unsigned(i_0_i_reg_145),32));
    i_fu_173_p2 <= std_logic_vector(unsigned(i_0_i_reg_145) + unsigned(ap_const_lv4_1));
    k_cast1_i_cast_fu_213_p1 <= std_logic_vector(resize(unsigned(k_i_reg_156),8));
    k_cast1_i_fu_208_p1 <= std_logic_vector(resize(unsigned(k_i_reg_156),32));
    k_fu_202_p2 <= std_logic_vector(unsigned(k_i_reg_156) + unsigned(ap_const_lv4_1));
    row_outbuf_i_address0 <= tmp_17_cast_fu_442_p1(6 - 1 downto 0);

    row_outbuf_i_ce0_assign_proc : process(ap_enable_reg_pp0_iter4)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter4)) then 
            row_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            row_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_outbuf_i_d0 <= tmp_1_i_reg_642;

    row_outbuf_i_we0_assign_proc : process(ap_pipeline_reg_pp0_iter3_tmp_i_reg_523, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_tmp_i_reg_523)))) then 
            row_outbuf_i_we0 <= ap_const_logic_1;
        else 
            row_outbuf_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_418_p2 <= std_logic_vector(signed(grp_fu_488_p3) + signed(grp_fu_480_p3));
    tmp4_fu_422_p2 <= std_logic_vector(signed(tmp6_reg_637) + signed(grp_fu_496_p3));
    tmp_16_cast_fu_192_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_184_p3),8));
    tmp_17_cast_fu_442_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter3_tmp_4_reg_532),32));
    tmp_49_fu_222_p1 <= dct_coeff_table_q0(16 - 1 downto 0);
    tmp_4_fu_217_p2 <= std_logic_vector(unsigned(k_cast1_i_cast_fu_213_p1) + unsigned(tmp_16_cast_reg_513));
    tmp_50_fu_226_p1 <= buf_2d_in_q0(16 - 1 downto 0);
    tmp_9_i_fu_426_p2 <= std_logic_vector(unsigned(tmp4_fu_422_p2) + unsigned(tmp1_fu_418_p2));
    tmp_fu_167_p2 <= "1" when (i_0_i_reg_145 = ap_const_lv4_8) else "0";
    tmp_i_fu_196_p2 <= "1" when (k_i_reg_156 = ap_const_lv4_8) else "0";
    tmp_s_fu_184_p3 <= (i_0_i_reg_145 & ap_const_lv3_0);
end behav;
