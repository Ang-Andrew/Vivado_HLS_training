-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Xpose_Col_Outer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    col_outbuf_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    col_outbuf_i_ce0 : OUT STD_LOGIC;
    col_outbuf_i_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_2d_out_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    buf_2d_out_ce0 : OUT STD_LOGIC;
    buf_2d_out_we0 : OUT STD_LOGIC;
    buf_2d_out_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_Xpose_Col_Outer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_69 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_i_reg_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_i_reg_91 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal indvar_flatten_next_fu_108_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_3_i_mid2_fu_126_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_i_mid2_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_i_cast5_mid2_v_fu_134_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_i_cast5_mid2_v_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_169_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal j_1_i_phi_fu_84_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_cast_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_114_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_146_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_i_cast5_mid2_cas_fu_142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_cast_fu_154_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_158_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_175_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_i_cast4_cast_fu_186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_fu_182_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_189_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_102_p2 = ap_const_lv1_0)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_102_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((exitcond_flatten_fu_102_p2 = ap_const_lv1_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_3_i_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_102_p2 = ap_const_lv1_0))) then 
                i_3_i_reg_91 <= i_fu_169_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                i_3_i_reg_91 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_102_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_69 <= indvar_flatten_next_fu_108_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                indvar_flatten_reg_69 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_200 = ap_const_lv1_0))) then 
                j_1_i_reg_80 <= j_1_i_cast5_mid2_v_reg_214;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
                j_1_i_reg_80 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_200 <= exitcond_flatten_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_fu_102_p2 = ap_const_lv1_0))) then
                i_3_i_mid2_reg_209 <= i_3_i_mid2_fu_126_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_102_p2 = ap_const_lv1_0))) then
                j_1_i_cast5_mid2_v_reg_214 <= j_1_i_cast5_mid2_v_fu_134_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, exitcond_flatten_fu_102_p2, ap_enable_reg_pp0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((exitcond_flatten_fu_102_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_out_address0 <= tmp_14_cast_fu_195_p1(6 - 1 downto 0);

    buf_2d_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            buf_2d_out_ce0 <= ap_const_logic_1;
        else 
            buf_2d_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_out_d0 <= col_outbuf_i_q0;

    buf_2d_out_we0_assign_proc : process(exitcond_flatten_reg_200, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_200 = ap_const_lv1_0)))) then 
            buf_2d_out_we0 <= ap_const_logic_1;
        else 
            buf_2d_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_outbuf_i_address0 <= tmp_13_cast_fu_164_p1(6 - 1 downto 0);

    col_outbuf_i_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            col_outbuf_i_ce0 <= ap_const_logic_1;
        else 
            col_outbuf_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_102_p2 <= "1" when (indvar_flatten_reg_69 = ap_const_lv7_40) else "0";
    i_3_i_cast4_cast_fu_186_p1 <= std_logic_vector(resize(unsigned(i_3_i_mid2_reg_209),8));
    i_3_i_mid2_fu_126_p3 <= 
        ap_const_lv4_0 when (tmp_s_fu_120_p2(0) = '1') else 
        i_3_i_reg_91;
    i_fu_169_p2 <= std_logic_vector(unsigned(i_3_i_mid2_fu_126_p3) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_108_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_69) + unsigned(ap_const_lv7_1));
    j_1_i_cast5_mid2_cas_fu_142_p1 <= std_logic_vector(resize(unsigned(j_1_i_cast5_mid2_v_fu_134_p3),8));
    j_1_i_cast5_mid2_v_fu_134_p3 <= 
        j_fu_114_p2 when (tmp_s_fu_120_p2(0) = '1') else 
        j_1_i_phi_fu_84_p4;

    j_1_i_phi_fu_84_p4_assign_proc : process(j_1_i_reg_80, exitcond_flatten_reg_200, ap_CS_fsm_pp0_stage0, j_1_i_cast5_mid2_v_reg_214, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_200 = ap_const_lv1_0))) then 
            j_1_i_phi_fu_84_p4 <= j_1_i_cast5_mid2_v_reg_214;
        else 
            j_1_i_phi_fu_84_p4 <= j_1_i_reg_80;
        end if; 
    end process;

    j_fu_114_p2 <= std_logic_vector(unsigned(j_1_i_phi_fu_84_p4) + unsigned(ap_const_lv4_1));
    tmp_10_cast_fu_182_p1 <= std_logic_vector(resize(unsigned(tmp_fu_175_p3),8));
    tmp_12_cast_fu_154_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_146_p3),8));
    tmp_13_cast_fu_164_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_158_p2),32));
    tmp_14_cast_fu_195_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_189_p2),32));
    tmp_1_fu_146_p3 <= (i_3_i_mid2_fu_126_p3 & ap_const_lv3_0);
    tmp_2_fu_158_p2 <= std_logic_vector(unsigned(j_1_i_cast5_mid2_cas_fu_142_p1) + unsigned(tmp_12_cast_fu_154_p1));
    tmp_3_fu_189_p2 <= std_logic_vector(unsigned(i_3_i_cast4_cast_fu_186_p1) + unsigned(tmp_10_cast_fu_182_p1));
    tmp_fu_175_p3 <= (j_1_i_cast5_mid2_v_reg_214 & ap_const_lv3_0);
    tmp_s_fu_120_p2 <= "1" when (i_3_i_reg_91 = ap_const_lv4_8) else "0";
end behav;
